from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from database import check_user_access, add_nutrition_report, get_nutrition_reports, save_calorie_norms, get_calorie_norms, add_calorie_request, get_pending_calorie_requests, update_calorie_request_status
from utils.bot_instance import bot
import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–∏—Ç–∞–Ω–∏–∏
class NutritionReport(StatesGroup):
    waiting_for_breakfast = State()
    waiting_for_lunch = State()
    waiting_for_dinner = State()
    waiting_for_snacks = State()
    waiting_for_water = State()
    waiting_for_notes = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
class CalorieCalculation(StatesGroup):
    waiting_for_age = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_gender = State()
    waiting_for_activity = State()
    waiting_for_goal = State()

# –û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏
@router.callback_query(F.data == "nutrition_report")
async def start_nutrition_report(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üç≥ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –∑–∞–≤—Ç—Ä–∞–∫–µ:")
    await state.set_state(NutritionReport.waiting_for_breakfast)
    await callback.answer()

@router.message(NutritionReport.waiting_for_breakfast, F.text)
async def process_breakfast(message: Message, state: FSMContext):
    await state.update_data(breakfast=message.text)
    await message.answer("üç≤ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –æ–±–µ–¥:")
    await state.set_state(NutritionReport.waiting_for_lunch)

@router.message(NutritionReport.waiting_for_lunch, F.text)
async def process_lunch(message: Message, state: FSMContext):
    await state.update_data(lunch=message.text)
    await message.answer("üçΩÔ∏è –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —É–∂–∏–Ω:")
    await state.set_state(NutritionReport.waiting_for_dinner)

@router.message(NutritionReport.waiting_for_dinner, F.text)
async def process_dinner(message: Message, state: FSMContext):
    await state.update_data(dinner=message.text)
    await message.answer("üçé –ë—ã–ª–∏ –ø–µ—Ä–µ–∫—É—Å—ã? –û–ø–∏—à–∏—Ç–µ:")
    await state.set_state(NutritionReport.waiting_for_snacks)

@router.message(NutritionReport.waiting_for_snacks, F.text)
async def process_snacks(message: Message, state: FSMContext):
    await state.update_data(snacks=message.text)
    await message.answer("üíß –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª–∏ (–≤ –ª–∏—Ç—Ä–∞—Ö)?")
    await state.set_state(NutritionReport.waiting_for_water)

@router.message(NutritionReport.waiting_for_water, F.text)
async def process_water(message: Message, state: FSMContext):
    try:
        water = float(message.text)
        await state.update_data(water=water)
        await message.answer("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
        await state.set_state(NutritionReport.waiting_for_notes)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5 –∏–ª–∏ 2):")

@router.message(NutritionReport.waiting_for_notes, F.text)
async def process_notes(message: Message, state: FSMContext):
    data = await state.get_data()
    notes = message.text if message.text.lower() != '–Ω–µ—Ç' else ''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    await add_nutrition_report(
        message.from_user.id,
        data['breakfast'],
        data['lunch'],
        data['dinner'],
        data['snacks'],
        data['water'],
        notes
    )
    
    await message.answer("‚úÖ –û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ä–∞—Ü–∏–æ–Ω–∞!")
    await state.clear()

# –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π
@router.callback_query(F.data == "nutrition_calories_norm")
async def show_calorie_norms(callback: CallbackQuery):
    norms = await get_calorie_norms(callback.from_user.id)
    if norms:
        calories, protein, fat, carbs, updated = norms
        text = (
            f"üìä –í–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:\n\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {protein} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {fat} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.fromisoformat(updated).strftime('%d.%m.%Y')}"
        )
    else:
        text = "–£ –≤–∞—Å –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–æ—Ä–º—ã –ø–∏—Ç–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
    
    await callback.message.answer(text)
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_gender_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")
    builder.button(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
    return builder.as_markup()

def get_activity_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", callback_data="activity_sedentary")
    builder.button(text="–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_light")
    builder.button(text="–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_moderate")
    builder.button(text="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_high")
    builder.button(text="–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_extreme")
    builder.adjust(1)
    return builder.as_markup()

def get_goal_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="goal_lose")
    builder.button(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data="goal_maintain")
    builder.button(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_gain")
    builder.adjust(1)
    return builder.as_markup()

# –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
@router.callback_query(F.data == "nutrition_calories_calc")
async def start_calorie_calculation(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(CalorieCalculation.waiting_for_age)
    await callback.answer()

@router.message(CalorieCalculation.waiting_for_age, F.text)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if 10 <= age <= 100:
            await state.update_data(age=age)
            await message.answer("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
            await state.set_state(CalorieCalculation.waiting_for_weight)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.message(CalorieCalculation.waiting_for_weight, F.text)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if 30 <= weight <= 200:
            await state.update_data(weight=weight)
            await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
            await state.set_state(CalorieCalculation.waiting_for_height)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.message(CalorieCalculation.waiting_for_height, F.text)
async def process_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        if 100 <= height <= 250:
            await state.update_data(height=height)
            await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=get_gender_keyboard())
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.callback_query(F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    gender = "male" if callback.data == "gender_male" else "female"
    await state.update_data(gender=gender)
    await callback.message.edit_text("üèÉ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=get_activity_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("activity_"))
async def process_activity(callback: CallbackQuery, state: FSMContext):
    activity_map = {
        "activity_sedentary": "sedentary",
        "activity_light": "light",
        "activity_moderate": "moderate",
        "activity_high": "high",
        "activity_extreme": "extreme"
    }
    await state.update_data(activity=activity_map[callback.data])
    await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=get_goal_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    goal_map = {
        "goal_lose": "lose",
        "goal_maintain": "maintain",
        "goal_gain": "gain"
    }
    data = await state.get_data()
    data['goal'] = goal_map[callback.data]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    await add_calorie_request(
        callback.from_user.id,
        data['age'],
        data['weight'],
        data['height'],
        data['gender'],
        data['activity'],
        data['goal']
    )
    
    await callback.message.edit_text(
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–µ–Ω–µ—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º! "
        "–û–±—ã—á–Ω–æ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–æ—Ä–º—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã."
    )
    await state.clear()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    admin_text = (
        f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –æ—Ç {callback.from_user.full_name}\n\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"‚Ä¢ –í–µ—Å: {data['weight']} –∫–≥\n"
        f"‚Ä¢ –†–æ—Å—Ç: {data['height']} —Å–º\n"
        f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']}\n"
        f"‚Ä¢ –¶–µ–ª—å: {data['goal']}\n\n"
        f"üë§ @{callback.from_user.username}"
    )
    await bot.send_message(chat_id=config.ADMIN_ID, text=admin_text)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π)
@router.message(Command("calorierequests"))
async def cmd_calorie_requests(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    requests = await get_pending_calorie_requests()
    if not requests:
        await message.answer("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π.")
        return
    
    text = "üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π:\n\n"
    for req in requests:
        request_id, user_id, full_name, username, age, weight, height, gender, activity, goal, created = req
        text += f"üë§ {full_name} (@{username})\n"
        text += f"üìä –í–æ–∑—Ä–∞—Å—Ç: {age}, –í–µ—Å: {weight}–∫–≥, –†–æ—Å—Ç: {height}—Å–º\n"
        text += f"üéØ –¶–µ–ª—å: {goal}, –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}\n"
        text += f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n"
        text += "‚îÄ" * 30 + "\n"
    
    await message.answer(text)

@router.message(Command("setcalories"))
async def cmd_set_calories(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    try:
        # –ö–æ–º–∞–Ω–¥–∞: /setcalories <user_id> <calories> <protein> <fat> <carbs>
        parts = message.text.split()
        if len(parts) != 6:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcalories <user_id> <calories> <protein> <fat> <carbs>")
            return
        
        user_id = int(parts[1])
        calories = int(parts[2])
        protein = int(parts[3])
        fat = int(parts[4])
        carbs = int(parts[5])
        
        await save_calorie_norms(user_id, calories, protein, fat, carbs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö pending –∑–∞–ø—Ä–æ—Å–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_calorie_request_status(user_id, 'approved')
        
        await message.answer(f"‚úÖ –ù–æ—Ä–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_text = (
            f"üéâ –í–∞—à–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã!\n\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {protein} –≥/–¥–µ–Ω—å\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {fat} –≥/–¥–µ–Ω—å\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥/–¥–µ–Ω—å\n\n"
            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ—Ä–º—ã –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´ü•ó –ü–∏—Ç–∞–Ω–∏–µ¬ª ‚Üí ¬´–¢–≤–æ—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π¬ª"
        )
        await bot.send_message(chat_id=user_id, text=user_text)
        
    except (ValueError, IndexError):
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcalories <user_id> <calories> <protein> <fat> <carbs>")

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
@router.callback_query(F.data == "nutrition_recom")
async def nutrition_recom(callback: CallbackQuery):
    text = (
        "üçé –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n\n"
        "‚Ä¢ –ï—à—å—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –ø–∏—â—É\n"
        "‚Ä¢ –ü–µ–π—Ç–µ 2-3 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ –£–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –±–µ–ª–æ–∫ —Å –∫–∞–∂–¥—ã–º –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏\n"
        "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ processed food\n"
        "‚Ä¢ –ï—à—å—Ç–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n\n"
        "–î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º."
    )
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "nutrition_checklist")
async def nutrition_checklist(callback: CallbackQuery):
    text = (
        "üõí –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n"
        "‚úÖ –ë–µ–ª–∫–∏:\n‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞\n‚Ä¢ –ì–æ–≤—è–¥–∏–Ω–∞\n‚Ä¢ –†—ã–±–∞\n‚Ä¢ –Ø–π—Ü–∞\n‚Ä¢ –¢–≤–æ—Ä–æ–≥\n‚Ä¢ –¢–æ—Ñ—É\n\n"
        "‚úÖ –£–≥–ª–µ–≤–æ–¥—ã:\n‚Ä¢ –ì—Ä–µ—á–∫–∞\n‚Ä¢ –†–∏—Å\n‚Ä¢ –û–≤—Å—è–Ω–∫–∞\n‚Ä¢ –ö–∏–Ω–æ–∞\n‚Ä¢ –ë–∞—Ç–∞—Ç\n‚Ä¢ –¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–±\n\n"
        "‚úÖ –ñ–∏—Ä—ã:\n‚Ä¢ –ê–≤–æ–∫–∞–¥–æ\n‚Ä¢ –û—Ä–µ—Ö–∏\n‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ\n‚Ä¢ –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞\n‚Ä¢ –°–µ–º–µ–Ω–∞\n\n"
        "‚úÖ –û–≤–æ—â–∏:\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏\n‚Ä¢ –®–ø–∏–Ω–∞—Ç\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å\n‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã\n‚Ä¢ –û–≥—É—Ä—Ü—ã\n‚Ä¢ –¶–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞"
    )
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "nutrition_recipes")
async def nutrition_recipes(callback: CallbackQuery):
    text = (
        "üìö –ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤:\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞!\n\n"
        "–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é\n"
        "‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–≤—è–∑–∏\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"
    )
    await callback.message.answer(text)
    await callback.answer()