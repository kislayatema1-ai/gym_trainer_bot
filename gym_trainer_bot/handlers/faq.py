from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from keyboards.main_menu import get_faq_keyboard
from database import get_faq_categories, get_faq_items, add_support_message, get_support_messages, update_support_message
from utils.bot_instance import bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
import datetime

router = Router()

class SupportResponse(StatesGroup):
    waiting_for_response = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ
class AddFAQItem(StatesGroup):
    waiting_for_category = State()
    waiting_for_question = State()
    waiting_for_answer = State()

# FAQ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "‚ùì FAQ")
async def open_faq(message: Message):
    categories = await get_faq_categories()
    if not categories:
        await message.answer("‚ÑπÔ∏è –†–∞–∑–¥–µ–ª FAQ –ø–æ–∫–∞ –ø—É—Å—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
        return
    
    text = "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await message.answer(text, reply_markup=get_faq_categories_keyboard(categories))

def get_faq_categories_keyboard(categories):
    builder = InlineKeyboardBuilder()
    for category in categories:
        category_id, category_name, description = category
        builder.button(text=category_name, callback_data=f"faq_cat_{category_id}")
    builder.button(text="üìû –°–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º", callback_data="support_contact")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()

@router.callback_query(F.data.startswith("faq_cat_"))
async def show_faq_category(callback: CallbackQuery):
    category_id = int(callback.data.replace("faq_cat_", ""))
    items = await get_faq_items(category_id)
    
    if not items:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = await get_faq_categories()
    category_name = next((cat[1] for cat in categories if cat[0] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    text = f"‚ùì *{category_name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:"
    
    builder = InlineKeyboardBuilder()
    for item in items:
        item_id, question, answer, cat_name = item
        builder.button(text=question, callback_data=f"faq_item_{item_id}")
    
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="faq_back")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("faq_item_"))
async def show_faq_answer(callback: CallbackQuery):
    item_id = int(callback.data.replace("faq_item_", ""))
    all_items = await get_faq_items()
    item = next((it for it in all_items if it[0] == item_id), None)
    
    if not item:
        await callback.message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    item_id, question, answer, category_name = item
    
    text = f"‚ùì *{question}*\n\n{answer}\n\n_–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}_"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data=f"faq_cat_{next((cat[0] for cat in await get_faq_categories() if cat[1] == category_name), '')}")
    builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ
@router.message(Command("addfaq"))
async def cmd_add_faq(message: Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    categories = await get_faq_categories()
    if not categories:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /addfaqcategory")
        return
    
    builder = InlineKeyboardBuilder()
    for category in categories:
        category_id, category_name, description = category
        builder.button(text=category_name, callback_data=f"addfaq_cat_{category_id}")
    
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    builder.adjust(1)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=builder.as_markup())
    await state.set_state(AddFAQItem.waiting_for_category)

@router.callback_query(F.data.startswith("addfaq_cat_"))
async def process_faq_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.replace("addfaq_cat_", ""))
    await state.update_data(category_id=category_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AddFAQItem.waiting_for_question)
    await callback.answer()

@router.message(AddFAQItem.waiting_for_question, F.text)
async def process_faq_question(message: Message, state: FSMContext):
    await state.update_data(question=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AddFAQItem.waiting_for_answer)

@router.message(AddFAQItem.waiting_for_answer, F.text)
async def process_faq_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    await add_faq_item(data['category_id'], data['question'], message.text)
    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ FAQ!")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(Command("addfaqcategory"))
async def cmd_add_faq_category(message: Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    parts = message.text.split(' ', 2)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfaqcategory <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
        return
    
    category_name = parts[1]
    category_description = parts[2]
    
    await add_faq_category(category_name, category_description)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è FAQ
@router.callback_query(F.data == "faq_back")
async def faq_back(callback: CallbackQuery):
    categories = await get_faq_categories()
    text = "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await callback.message.edit_text(text, reply_markup=get_faq_categories_keyboard(categories))
    await callback.answer()
    
@router.callback_query(F.data == "faq_main")
async def open_faq_callback(callback: CallbackQuery):
    categories = await get_faq_categories()
    if not categories:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ä–∞–∑—É —Å–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º
        text = (
            "‚ÑπÔ∏è –†–∞–∑–¥–µ–ª FAQ –ø–æ–∫–∞ –ø—É—Å—Ç.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏\n"
            "‚Ä¢ üé• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å—ä–µ–º–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
            "‚Ä¢ üìä –£–∑–Ω–∞—Ç—å –∫–∞–∫ –≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç—ã"
        )
        await callback.message.edit_text(text, reply_markup=get_faq_keyboard())
        await callback.answer()
        return
    
    text = "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await callback.message.edit_text(text, reply_markup=get_faq_categories_keyboard(categories))
    await callback.answer()
    
@router.message(Command("checkfaq"))
async def cmd_check_faq(message: Message):
    categories = await get_faq_categories()
    items = await get_faq_items()
    
    text = (
        f"üìä –°—Ç–∞—Ç—É—Å FAQ:\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n"
        f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: {len(items)}\n\n"
    )
    
    if categories:
        text += "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        for category in categories:
            category_id, category_name, description = category
            category_items = [item for item in items if item[3] == category_name]
            text += f"‚Ä¢ {category_name}: {len(category_items)} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
    
    await message.answer(text)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ FAQ
@router.callback_query(F.data == "faq_back_to_main")
async def faq_back_to_main(callback: CallbackQuery):
    await callback.message.edit_text("‚ùì –†–∞–∑–¥–µ–ª ¬´FAQ¬ª:", reply_markup=get_faq_keyboard())
    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è guide-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "faq_video_guide")
async def faq_video_guide(callback: CallbackQuery):
    text = (
        "üé• *–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–Ω–∏–º–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–∏–¥–µ–æ:*\n\n"
        "‚úÖ *–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:*\n"
        "‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∫—É—Ä—Å–æ–≤ (—Å–ø–µ—Ä–µ–¥–∏, —Å–±–æ–∫—É, —Å–∑–∞–¥–∏)\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –≤—Å—é –∞–º–ø–ª–∏—Ç—É–¥—É –¥–≤–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 15-30 —Å–µ–∫—É–Ω–¥\n\n"
        "‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã\n"
        "‚Ä¢ –í–∏–¥–Ω—ã –≤—Å–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥—Ä–æ–∂–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã"
    )
    await callback.message.edit_text(text)
    await callback.answer()

@router.callback_query(F.data == "faq_reports_guide")
async def faq_reports_guide(callback: CallbackQuery):
    text = (
        "üìä *–ö–∞–∫ –≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç—ã:*\n\n"
        "‚úÖ *–í–∏–¥–µ–æ–æ—Ç—á–µ—Ç—ã:*\n"
        "‚Ä¢ 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É —Å–ª–æ–∂–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–∞–±–æ—á–∏–µ –≤–µ—Å–∞ –∏ –æ—â—É—â–µ–Ω–∏—è\n\n"
        "‚úÖ *–û—Ç—á–µ—Ç—ã –æ –ø–∏—Ç–∞–Ω–∏–∏:*\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
        "‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –æ–±—ä–µ–º—ã\n"
        "‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –≤–æ–¥—É\n\n"
        "‚úÖ *–û—Ç—á–µ—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:*\n"
        "‚Ä¢ –ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —É—Å–ø–µ—Ö–∏\n"
        "‚Ä¢ –°–æ–æ–±—â–∞–π—Ç–µ –æ –±–æ–ª—è—Ö –∏–ª–∏ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–µ"
    )
    await callback.message.edit_text(text)
    await callback.answer()