import asyncio
import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import config
from database import add_payment, update_payment_status, update_user_access, get_pending_payments, get_access_until
from keyboards.main_menu import get_payment_keyboard, get_paid_button, get_admin_payment_decision_kb

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ–∑–¥–∞–µ–º –ú–∞—à–∏–Ω—É –°–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —à–∞–≥–∞ –æ–ø–ª–∞—Ç—ã
class PaymentState(StatesGroup):
    waiting_for_screenshot = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"
@router.callback_query(F.data == "pay_subscription")
async def process_payment(callback: CallbackQuery):
    payment_text = (
        "üí≥ *–û–ü–õ–ê–¢–ê –ê–ë–û–ù–ï–ú–ï–ù–¢–ê*\n\n"
        "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É:\n\n"
        "*–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:* `1111 2222 3333 4444`\n"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–Æ –ö–ê–†–¢–£!
        "*–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"             # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ï –ò–ú–Ø!
        "*–°—É–º–º–∞:* 100 BYN (–∑–∞ 4 –Ω–µ–¥–µ–ª–∏)\n\n"
        "‚ö†Ô∏è *–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ:*\n"
        "‚Äî –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Äî –ò–ª–∏ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é\n\n"
        "–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª –Ω–∏–∂–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞."
    )
    await callback.message.edit_text(payment_text, reply_markup=get_paid_button())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)" - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@router.callback_query(F.data == "i_paid")
async def start_waiting_for_screenshot(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º *—Å–∫—Ä–∏–Ω—à–æ—Ç* –∏–ª–∏ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* —á–µ–∫–∞ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(PaymentState.waiting_for_screenshot)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(PaymentState.waiting_for_screenshot, F.photo)
async def receive_screenshot(message: Message, state: FSMContext):
    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    screenshot_id = message.photo[-1].file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
    await add_payment(user_id, screenshot_id)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç—Ä–µ–Ω–µ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤. –°–ø–∞—Å–∏–±–æ!")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # --- –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£ ---
    admin_text = (
        f"üîÑ *–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ –ù–ê –ü–†–û–í–ï–†–ö–£*\n\n"
        f"*–ö–ª–∏–µ–Ω—Ç:* {message.from_user.full_name} (@{message.from_user.username})\n"
        f"*User ID:* `{user_id}`\n"
        f"*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {message.date.strftime('%d.%m.%Y, %H:%M')}"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Ç–µ–∫—Å—Ç –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
    from utils.bot_instance import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –æ—Ç—Å—é–¥–∞ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏)
    await bot.send_photo(chat_id=config.ADMIN_ID, photo=screenshot_id, caption=admin_text, reply_markup=get_admin_payment_decision_kb(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
@router.callback_query(F.data.startswith("approve_"))
async def admin_approve_payment(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ: approve_123456789_full -> (123456789, 'full')
    parts = callback.data.split("_")
    user_id = int(parts[1])
    product_type = parts[2] if len(parts) > 2 else 'full'
    admin_id = callback.from_user.id

    if admin_id != config.ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    await update_payment_status(user_id, 'approved')
    
    product_type_text = "–ø–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ" if product_type == 'full' else "–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"
    
    if product_type == 'full':
        # –ü–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ - –¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        new_access_date = await update_user_access(user_id, 30)
        access_message = f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {new_access_date}."
        
        # –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–õ–¨–®–£–Æ –ê–ù–ö–ï–¢–£ –¢–û–õ–¨–ö–û –î–õ–Ø –ü–û–õ–ù–û–ì–û –í–ï–î–ï–ù–ò–Ø
        try:
            from handlers.questionnaire import start_full_questionnaire
            await asyncio.sleep(2)
            await start_full_questionnaire(user_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∫–µ—Ç—ã: {e}")
            from utils.bot_instance import bot
            await bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    else:
        # –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è - –Ω–µ –¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        access_message = "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è

    # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É
    await callback.message.edit_caption(
        caption=f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù*.\n"
                f"–¢–∏–ø: {product_type_text}\n"
                f"–°—É–º–º–∞: {'100' if product_type == 'full' else '25'} BYN"
    )
    await callback.answer("–û–¥–æ–±—Ä–µ–Ω–æ!")

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from utils.bot_instance import bot
    await bot.send_message(chat_id=user_id, text=access_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞: –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
@router.callback_query(F.data.startswith("deny_"))
async def admin_deny_payment(callback: CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[1])
    product_type = parts[2] if len(parts) > 2 else 'full'
    admin_id = callback.from_user.id

    if admin_id != config.ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    await update_payment_status(user_id, 'denied')
    
    product_type_text = "–ø–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ" if product_type == 'full' else "–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"

    await callback.message.edit_caption(
        caption=f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} *–û–¢–ö–õ–û–ù–ï–ù*.\n"
                f"–¢–∏–ø: {product_type_text}"
    )
    await callback.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ!")

    user_notification_text = (
        "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. "
        "–í–æ–∑–º–æ–∂–Ω–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ—á–∏—Ç–∞–µ–º –∏–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª ¬´üìû –°–≤—è–∑—å –ø–æ –æ–ø–ª–∞—Ç–µ¬ª."
    )
    from utils.bot_instance import bot
    await bot.send_message(chat_id=user_id, text=user_notification_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π –¥–æ—Å—Ç—É–ø"
@router.callback_query(F.data == "check_my_access")
async def check_access_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    access_until = await get_access_until(user_id)
    await callback.answer(f"–í–∞—à –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {access_until}", show_alert=True)

@router.message(Command('payments'))
async def cmd_payments(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    pending_payments = await get_pending_payments()
    if not pending_payments:
        await message.answer("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.")
        return
    
    text = "üìã –ü–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n\n"
    for payment in pending_payments:
        user_id, username, full_name, screenshot_id, date = payment
        text += f"üë§ {full_name} (@{username})\n"
        text += f"üÜî ID: {user_id}\n"
        text += f"üìÖ –î–∞—Ç–∞: {datetime.datetime.fromisoformat(date).strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üîó Screenshot ID: {screenshot_id}\n"
        text += "‚îÄ" * 20 + "\n"
    
    await message.answer(text)