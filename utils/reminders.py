import asyncio
from datetime import datetime, timedelta
from database import get_users_with_active_access, get_last_progress_date
from utils.bot_instance import bot

async def send_reminders():
    while True:
        try:
            now = datetime.now()
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏ (–∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 9:00)
            if now.weekday() == 4 and now.hour == 9 and now.minute == 0:  # –ü—è—Ç–Ω–∏—Ü–∞ 9:00
                active_users = await get_users_with_active_access()
                for user in active_users:
                    user_id, username, full_name, access_until = user
                    last_progress = await get_last_progress_date(user_id)
                    
                    if not last_progress or (datetime.now() - datetime.fromisoformat(last_progress)).days > 6:
                        try:
                            await bot.send_message(
                                user_id,
                                "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤–µ—Å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ! üìà\n\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´üìä –ü—Ä–æ–≥—Ä–µ—Å—Å¬ª ‚Üí ¬´üìà –î–æ–±–∞–≤–∏—Ç—å –≤–µ—Å¬ª"
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö (–ø–Ω, —Å—Ä, –ø—Ç –≤ 8:00)
            if now.weekday() in [0, 2, 4] and now.hour == 8 and now.minute == 0:  # –ü–Ω, –°—Ä, –ü—Ç 8:00
                active_users = await get_users_with_active_access()
                for user in active_users:
                    user_id, username, full_name, access_until = user
                    try:
                        await bot.send_message(
                            user_id,
                            "üí™ *–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!* –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ! üèãÔ∏è\n\n"
                            "–£–¥–∞—á–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! üí•"
                        )
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É (–≤–º–µ—Å—Ç–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            await asyncio.sleep(60)  # 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        except Exception as e:
            print(f"Error in reminders: {e}")
            await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def send_nutrition_reminders():
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è follow-up
            from database import get_users_for_followup
            users_to_followup = await get_users_for_followup()
            
            for user_id in users_to_followup:
                try:
                    await bot.send_message(
                        user_id,
                        "üçé –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è!\n\n"
                        "–•–æ—á–µ—à—å —á—Ç–æ–±—ã —è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Ç–µ–±—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω?",
                        reply_markup=get_nutrition_reminder_keyboard()
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    next_date = datetime.datetime.now() + datetime.timedelta(hours=48)
                    from database import update_onboarding_data
                    await update_onboarding_data(user_id, next_question_date=next_date.isoformat())
                    
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å
            await asyncio.sleep(3600)
            
        except Exception as e:
            print(f"Error in nutrition reminders: {e}")
            await asyncio.sleep(300)

async def send_pdf_followup():
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è follow-up —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
            from database import get_users_for_followup
            users_to_followup = await get_users_for_followup()
            
            for user_id in users_to_followup:
                try:
                    await bot.send_message(
                        user_id,
                        "üçé –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞—é –æ —Ñ–∞–π–ª–µ —Å —Ä–∞—Ü–∏–æ–Ω–æ–º!\n\n"
                        "–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —Ç—ã –ø–æ–¥–∞—Ä–∫–æ–º? –ü–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?",
                        reply_markup=get_pdf_followup_keyboard()
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    from database import update_onboarding_data
                    await update_onboarding_data(user_id, next_question_date=None)  # –ë–æ–ª—å—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
                    
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å
            await asyncio.sleep(3600)
            
        except Exception as e:
            print(f"Error in PDF followup: {e}")
            await asyncio.sleep(300)

def get_pdf_followup_keyboard():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è", callback_data="pdf_followup_yes")
    builder.button(text="‚ùå –ù–µ—Ç, –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è", callback_data="pdf_followup_no")
    builder.button(text="üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="pdf_followup_help")
    builder.adjust(1)
    return builder.as_markup()

def get_nutrition_reminder_keyboard():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —Ö–æ—á—É –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è!", callback_data="nutrition_plan_yes")
    builder.button(text="‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="nutrition_plan_no")
    return builder.as_markup()