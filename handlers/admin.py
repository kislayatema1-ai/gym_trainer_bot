from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from database import get_all_users, get_users_with_expiring_access, get_pending_payments, get_pending_calorie_requests, get_stats, add_user_access, update_payment_status, update_calorie_request_status, delete_user, get_detailed_stats, search_users
from keyboards.admin_menu import get_admin_keyboard, get_admin_users_keyboard, get_admin_payments_keyboard, get_admin_decision_keyboard
from keyboards.admin_advanced import get_admin_advanced_keyboard, get_admin_users_advanced_keyboard, get_admin_confirm_delete_keyboard
from utils.bot_instance import bot
import datetime

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
class AdminAddAccess(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_days = State()

class AdminStates(StatesGroup):
    waiting_for_delete_user_id = State()
    waiting_for_search_term = State()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    stats = await get_stats()
    text = (
        "üëë *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {stats['pending_payments']}\n"
        f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–ª–æ—Ä–∏–π: {stats['pending_calories']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    await message.answer(text, reply_markup=get_admin_advanced_keyboard())

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    stats = await get_stats()
    text = (
        "üëë *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {stats['pending_payments']}\n"
        f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–ª–æ—Ä–∏–π: {stats['pending_calories']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    await callback.message.edit_text(text, reply_markup=get_admin_advanced_keyboard())
    await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ)
@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    await callback.message.edit_text("üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_users_advanced_keyboard())
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "admin_users_delete")
async def admin_users_delete(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AdminStates.waiting_for_delete_user_id)
    await callback.answer()

@router.message(AdminStates.waiting_for_delete_user_id, F.text)
async def process_delete_user_id(message: Message, state: FSMContext):
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–Ω–µ—Ç']:
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    
    try:
        user_id = int(message.text)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = await get_all_users()
        user_exists = any(user[0] == user_id for user in users)
        
        if user_exists:
            await message.answer(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}?\n\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=get_admin_confirm_delete_keyboard(user_id)
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")

@router.callback_query(F.data == "admin_users_list")
async def admin_users_list(callback: CallbackQuery):
    users = await get_all_users()
    text = "üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    for user in users:
        user_id, username, full_name, access_until = user
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if access_until and datetime.datetime.strptime(access_until, '%Y-%m-%d').date() >= datetime.date.today() else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        text += f"üë§ {full_name} (@{username})\nüÜî ID: {user_id}\nüìÖ –î–æ—Å—Ç—É–ø: {access_until}\n{status}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await callback.message.edit_text(text, reply_markup=get_admin_users_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("admin_delete_confirm_"))
async def admin_delete_confirm(callback: CallbackQuery):
    user_id = int(callback.data.replace("admin_delete_confirm_", ""))
    
    try:
        await delete_user(user_id)
        await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await callback.answer()

# –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats_detailed")
async def admin_stats_detailed(callback: CallbackQuery):
    stats = await get_detailed_stats()
    
    text = (
        "üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {stats['new_users_30d']}\n\n"
        f"üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n"
        f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ 30 –¥–Ω–µ–π: {stats['recent_payments']}\n"
        f"‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ 30 –¥–Ω–µ–π: {stats['recent_revenue']} BYN\n\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.date.today().strftime('%d.%m.%Y')}"
    )
    
    await callback.message.edit_text(text, reply_markup=get_admin_advanced_keyboard())
    await callback.answer()

# –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "admin_commands")
async def admin_commands(callback: CallbackQuery):
    commands_text = (
        "üìã *–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:*\n\n"
        "‚Ä¢ /admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ /payments - –ü–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ\n"
        "‚Ä¢ /calorierequests - –ó–∞–ø—Ä–æ—Å—ã –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ /support - –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "‚Ä¢ /answer <id> <—Ç–µ–∫—Å—Ç> - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /setcalories <id> <–∫–∞–ª–æ—Ä–∏–∏> <–±–µ–ª–∫–∏> <–∂–∏—Ä—ã> <—É–≥–ª–µ–≤–æ–¥—ã> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—Ä–º—ã\n"
        "‚Ä¢ /addfaqcategory <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ> - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é FAQ\n"
        "‚Ä¢ /addfaq - –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ FAQ\n"
        "‚Ä¢ /addyoutube - –î–æ–±–∞–≤–∏—Ç—å YouTube –≤–∏–¥–µ–æ\n"
        "‚Ä¢ /broadcast <—Ç–µ–∫—Å—Ç> - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
        "‚öôÔ∏è *–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*"
    )
    
    await callback.message.edit_text(commands_text, reply_markup=get_admin_advanced_keyboard())
    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /broadcast –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    parts = message.text.split(' ', 1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏>")
        return
    
    broadcast_text = parts[1]
    users = await get_all_users()
    
    success = 0
    failed = 0
    
    for user in users:
        user_id, username, full_name, access_until = user
        try:
            await bot.send_message(user_id, f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞:*\n\n{broadcast_text}")
            success += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1
    
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")

# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "admin_users_search")
async def admin_users_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID, username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AdminStates.waiting_for_search_term)
    await callback.answer()

@router.message(AdminStates.waiting_for_search_term, F.text)
async def process_search_term(message: Message, state: FSMContext):
    search_term = message.text
    results = await search_users(search_term)
    
    if not results:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    
    text = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
    for user in results:
        user_id, username, full_name, access_until = user
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if access_until and datetime.datetime.strptime(access_until, '%Y-%m-%d').date() >= datetime.date.today() else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        text += f"üë§ {full_name} (@{username})\nüÜî ID: {user_id}\nüìÖ –î–æ—Å—Ç—É–ø: {access_until}\n{status}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await message.answer(text)
    await state.clear()

@router.callback_query(F.data == "admin_users_expiring")
async def admin_users_expiring(callback: CallbackQuery):
    users = await get_users_with_expiring_access(7)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º –¥–æ—Å—Ç—É–ø–æ–º (7 –¥–Ω–µ–π)
    if not users:
        await callback.message.edit_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º –¥–æ—Å—Ç—É–ø–æ–º.", reply_markup=get_admin_users_keyboard())
        await callback.answer()
        return
    
    text = "‚è∞ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º –¥–æ—Å—Ç—É–ø–æ–º:*\n\n"
    for user in users:
        user_id, username, full_name, access_until = user
        text += f"üë§ {full_name} (@{username})\nüÜî ID: {user_id}\nüìÖ –î–æ—Å—Ç—É–ø –¥–æ: {access_until}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await callback.message.edit_text(text, reply_markup=get_admin_users_keyboard())
    await callback.answer()

@router.callback_query(F.data == "admin_users_add_access")
async def admin_users_add_access(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø:")
    await state.set_state(AdminAddAccess.waiting_for_user_id)
    await callback.answer()

@router.message(AdminAddAccess.waiting_for_user_id, F.text)
async def process_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        await state.set_state(AdminAddAccess.waiting_for_days)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")

@router.message(AdminAddAccess.waiting_for_days, F.text)
async def process_days(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        data = await state.get_data()
        user_id = data['user_id']
        
        new_access_date = await add_user_access(user_id, days)
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {days} –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞. –ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_access_date}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_text = f"üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π! –ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_access_date}"
        await bot.send_message(chat_id=user_id, text=user_text)
        
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—á–∏—Å–ª–æ):")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏
@router.callback_query(F.data == "admin_payments")
async def admin_payments(callback: CallbackQuery):
    await callback.message.edit_text("üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏*:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_payments_keyboard())
    await callback.answer()

@router.callback_query(F.data == "admin_payments_active")
async def admin_payments_active(callback: CallbackQuery):
    payments = await get_pending_payments()
    if not payments:
        await callback.message.edit_text("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", reply_markup=get_admin_payments_keyboard())
        await callback.answer()
        return
    
    text = "üîÑ *–ü–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:*\n\n"
    for payment in payments:
        user_id, username, full_name, screenshot_id, date = payment
        text += f"üë§ {full_name} (@{username})\nüÜî ID: {user_id}\nüìÖ –î–∞—Ç–∞: {datetime.datetime.fromisoformat(date).strftime('%d.%m.%Y %H:%M')}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await callback.message.edit_text(text, reply_markup=get_admin_payments_keyboard())
    await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫–∞–ª–æ—Ä–∏–π
@router.callback_query(F.data == "admin_calories")
async def admin_calories(callback: CallbackQuery):
    requests = await get_pending_calorie_requests()
    if not requests:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π.", reply_markup=get_admin_keyboard())
        await callback.answer()
        return
    
    text = "üìã *–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π:*\n\n"
    for req in requests:
        request_id, user_id, full_name, username, age, weight, height, gender, activity, goal, created = req
        text += f"üë§ {full_name} (@{username})\nüÜî ID: {user_id}\nüìä –í–æ–∑—Ä–∞—Å—Ç: {age}, –í–µ—Å: {weight}–∫–≥, –†–æ—Å—Ç: {height}—Å–º\nüéØ –¶–µ–ª—å: {goal}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await callback.message.edit_text(text, reply_markup=get_admin_keyboard())
    await callback.answer()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    stats = await get_stats()
    text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users'] - stats['active_users']}\n"
        f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {stats['pending_payments']}\n"
        f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–ª–æ—Ä–∏–π: {stats['pending_calories']}\n\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.date.today().strftime('%d.%m.%Y')}"
    )
    await callback.message.edit_text(text, reply_markup=get_admin_keyboard())
    await callback.answer()

@router.message(Command("initfaq"))
async def cmd_init_faq(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    try:
        from utils.init_faq import init_faq_data
        await init_faq_data()
        await message.answer("‚úÖ FAQ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FAQ: {e}")