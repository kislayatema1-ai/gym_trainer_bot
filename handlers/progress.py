from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import add_progress_data, get_progress_data, get_last_weight, add_achievement, get_achievements, check_user_access
from utils.bot_instance import bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
import datetime
import matplotlib.pyplot as plt
import io
import numpy as np

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
class ProgressState(StatesGroup):
    waiting_for_weight = State()
    waiting_for_chest = State()
    waiting_for_waist = State()
    waiting_for_hips = State()
    waiting_for_arms = State()
    waiting_for_notes = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@router.callback_query(F.data == "progress_main")
async def progress_main(callback: CallbackQuery):
    if not await check_user_access(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç.")
        return
    
    text = (
        "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
        "‚Ä¢ üìà –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞\n"
        "‚Ä¢ üìè –ó–∞–º–µ—Ä—ã —Ç–µ–ª–∞\n"
        "‚Ä¢ üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ üì∏ –§–æ—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìà –î–æ–±–∞–≤–∏—Ç—å –≤–µ—Å", callback_data="progress_add_weight")
    builder.button(text="üìè –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ä—ã", callback_data="progress_add_measurements")
    builder.button(text="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="progress_achievements")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="progress_stats")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞
@router.callback_query(F.data == "progress_add_weight")
async def add_weight_start(callback: CallbackQuery, state: FSMContext):
    last_weight = await get_last_weight(callback.from_user.id)
    if last_weight:
        weight, date = last_weight
        await callback.message.answer(f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å: {weight} –∫–≥ ({datetime.datetime.fromisoformat(date).strftime('%d.%m.%Y')})\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):")
    else:
        await callback.message.answer("üìà –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):")
    
    await state.set_state(ProgressState.waiting_for_weight)
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (–±–µ–∑ –≤–µ—Å–∞)
@router.callback_query(F.data == "progress_add_measurements")
async def add_measurements_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–¥–∏ (—Å–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(ProgressState.waiting_for_chest)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞
@router.message(ProgressState.waiting_for_weight, F.text)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        if 30 <= weight <= 200:
            await state.update_data(weight=weight)
            await message.answer("üí™ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–¥–∏ (—Å–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
            await state.set_state(ProgressState.waiting_for_chest)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–¥–∏
@router.message(ProgressState.waiting_for_chest, F.text)
async def process_chest(message: Message, state: FSMContext):
    if message.text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–Ω–µ—Ç', 'skip', '-', '']:
        await state.update_data(chest=None)
    else:
        try:
            chest = float(message.text.replace(',', '.'))
            await state.update_data(chest=chest)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return
    
    await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Ç–∞–ª–∏–∏ (—Å–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(ProgressState.waiting_for_waist)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ª–∏–∏
@router.message(ProgressState.waiting_for_waist, F.text)
async def process_waist(message: Message, state: FSMContext):
    if message.text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–Ω–µ—Ç', 'skip', '-', '']:
        await state.update_data(waist=None)
    else:
        try:
            waist = float(message.text.replace(',', '.'))
            await state.update_data(waist=waist)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return
    
    await message.answer("ü¶µ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –±–µ–¥–µ—Ä (—Å–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(ProgressState.waiting_for_hips)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–¥–µ—Ä
@router.message(ProgressState.waiting_for_hips, F.text)
async def process_hips(message: Message, state: FSMContext):
    if message.text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–Ω–µ—Ç', 'skip', '-', '']:
        await state.update_data(hips=None)
    else:
        try:
            hips = float(message.text.replace(',', '.'))
            await state.update_data(hips=hips)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return
    
    await message.answer("üí™ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Ä—É–∫–∏ (—Å–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(ProgressState.waiting_for_arms)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É–∫
@router.message(ProgressState.waiting_for_arms, F.text)
async def process_arms(message: Message, state: FSMContext):
    if message.text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–Ω–µ—Ç', 'skip', '-', '']:
        await state.update_data(arms=None)
    else:
        try:
            arms = float(message.text.replace(',', '.'))
            await state.update_data(arms=arms)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return
    
    await message.answer("üìù –î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    await state.set_state(ProgressState.waiting_for_notes)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@router.message(ProgressState.waiting_for_notes, F.text)
async def process_notes(message: Message, state: FSMContext):
    notes = message.text if message.text.lower() != '–Ω–µ—Ç' else ''
    await state.update_data(notes=notes)
    
    data = await state.get_data()
    today = datetime.datetime.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await add_progress_data(
        message.from_user.id,
        today,
        data.get('weight'),
        data.get('chest'),
        data.get('waist'),
        data.get('hips'),
        data.get('arms'),
        notes
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    response_text = "‚úÖ *–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n"
    
    if data.get('weight'):
        response_text += f"üìà –í–µ—Å: {data['weight']} –∫–≥\n"
    if data.get('chest'):
        response_text += f"üìè –ì—Ä—É–¥—å: {data['chest']} —Å–º\n"
    if data.get('waist'):
        response_text += f"üìè –¢–∞–ª–∏—è: {data['waist']} —Å–º\n"
    if data.get('hips'):
        response_text += f"üìè –ë–µ–¥—Ä–∞: {data['hips']} —Å–º\n"
    if data.get('arms'):
        response_text += f"üìè –†—É–∫–∏: {data['arms']} —Å–º\n"
    if notes:
        response_text += f"üìù –ó–∞–º–µ—Ç–∫–∏: {notes}\n"
    
    response_text += "\nüìä –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ–≥—Ä–µ—Å—Å¬ª"
    
    await message.answer(response_text)
    await state.clear()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
@router.callback_query(F.data == "progress_stats")
async def show_progress_stats(callback: CallbackQuery):
    progress_data = await get_progress_data(callback.from_user.id, 30)
    
    if not progress_data:
        await callback.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤–µ—Å–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞
    dates = []
    weights = []
    
    for data in reversed(progress_data):  # –í —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        date_str, weight, chest, waist, hips, arms, notes = data
        if weight:
            dates.append(datetime.datetime.fromisoformat(date_str).strftime('%d.%m'))
            weights.append(weight)
    
    if len(weights) < 2:
        await callback.answer("üìà –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot(dates, weights, marker='o', linewidth=2, markersize=6)
        plt.title('üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤–µ—Å–∞', fontsize=14, fontweight='bold')
        plt.xlabel('–î–∞—Ç–∞', fontsize=12)
        plt.ylabel('–í–µ—Å (–∫–≥)', fontsize=12)
        plt.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ buffer
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=80, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await callback.message.answer_photo(
            photo=buf, 
            caption="üìä –í–∞—à–∞ –¥–∏–Ω–∞–º–∏–∫–∞ –≤–µ—Å–∞\n\n–î–æ–±–∞–≤–ª—è–π—Ç–µ –≤–µ—Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞! üí™"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è
        text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Å–∞:*\n\n"
        text += f"‚Ä¢ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {weights[-1]} –∫–≥\n"
        if len(weights) > 1:
            text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {weights[-1] - weights[0]:.1f} –∫–≥\n"
        text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {len(weights)}"
        await callback.message.answer(text)
    
    await callback.answer()

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
@router.callback_query(F.data == "progress_achievements")
async def show_achievements(callback: CallbackQuery):
    achievements = await get_achievements(callback.from_user.id)
    
    if not achievements:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å! üí™")
        return
    
    text = "üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
    for achievement in achievements:
        achievement_type, achievement_date, description = achievement
        text += f"‚Ä¢ {description}\n"
        text += f"  üìÖ {datetime.datetime.fromisoformat(achievement_date).strftime('%d.%m.%Y')}\n\n"
    
    await callback.message.answer(text)
    await callback.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
async def check_weight_achievements(user_id, current_weight):
    progress_data = await get_progress_data(user_id, 30)
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
    weight_records = [data for data in progress_data if data[1] is not None]
    if len(weight_records) >= 7:
        await add_achievement(user_id, "consistency", "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤–Ω–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –≤–µ—Å–∞! üèÜ")
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å
    if len(weight_records) >= 2:
        first_weight = weight_records[-1][1]
        last_weight = weight_records[0][1]
        difference = last_weight - first_weight
        
        if difference < -2:  # –ü–æ—Ö—É–¥–µ–Ω–∏–µ –Ω–∞ 2+ –∫–≥
            await add_achievement(user_id, "weight_loss", f"–ü–æ—Ö—É–¥–µ–ª –Ω–∞ {abs(difference):.1f} –∫–≥! üí™")
        elif difference > 2:  # –ù–∞–±–æ—Ä –º–∞—Å—Å—ã –Ω–∞ 2+ –∫–≥
            await add_achievement(user_id, "weight_gain", f"–ù–∞–±—Ä–∞–ª {difference:.1f} –∫–≥ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã! üèãÔ∏è")