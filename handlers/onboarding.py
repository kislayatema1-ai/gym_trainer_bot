import os
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from database import init_user_onboarding, update_onboarding_data, get_onboarding_data, check_user_access, add_payment
from utils.bot_instance import bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
import datetime

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è onboarding
class OnboardingState(StatesGroup):
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_age = State()
    waiting_for_allergies_details = State()
    waiting_for_experience = State()
    waiting_for_equipment = State()
    waiting_for_schedule = State()
    waiting_for_food_preferences = State()
    waiting_for_health_issues = State()
    waiting_for_onboarding_screenshot = State()

# –û–¢–î–ï–õ–¨–ù–´–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–Ω–∫–µ—Ç—ã (—á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏)
class FullQuestionnaireState(StatesGroup):
    waiting_for_full_height = State()
    waiting_for_full_weight = State()
    waiting_for_full_age = State()
    waiting_for_full_experience = State()
    waiting_for_full_equipment = State()
    waiting_for_full_schedule = State()
    waiting_for_full_goals = State()
    waiting_for_full_health = State()
    waiting_for_full_food_preferences = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞
async def show_trainer_contacts(message: Message):
    contact_text = (
        "üìû *–°–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º:*\n\n"
        f"üë§ Telegram: {config.ADMIN_USERNAME}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {config.ADMIN_CONTACT}\n"
        "‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 1-2 —á–∞—Å–∞\n\n"
        "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! üí™"
    )
    await message.answer(contact_text)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–∞—Ä–∫–∞
@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    from database import add_user
    await add_user(user_id, username, full_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º onboarding
    await init_user_onboarding(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {full_name}! üëã\n\n"
        "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Ç—Ä–µ–Ω–µ—Ä–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏. ‚ù§Ô∏è\n"
        "–Ø –¥–µ–ª–∞—é –≤–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º! –Ø —Ö—Ä–∞–Ω—é —Ç–∞–±–ª–∏—Ü—ã –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏–º–µ—é –±–∞–∑—É —É—Ä–æ–∫–æ–≤ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º, —É –º–µ–Ω—è –±–æ–ª—å—à–æ–π —Ä–∞–∑–¥–µ–ª –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–æ–∏–º –ø–∏—Ç–∞–Ω–∏–µ, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–ø–ª–∞—Ç–∞–º–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —è –±—É–¥—É –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ —Ä–∞–∑–¥–µ–ª—ã, –∞ –µ—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥—É—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ç–æ —Å–æ–æ–±—â–∞–π –æ –Ω–∏—Ö –ù–∞—Å—Ç–µ.\n\n"
        "–¢–∞–∫ –∂–µ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–∑–∂–µ\n"
        "üéÅ *–í –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ–±—è:*\n"
        "–†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å - —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
        "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Ü–∏–æ–Ω–æ–º?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —Ö–æ—á—É –ø–æ–¥–∞—Ä–æ–∫!", callback_data="onboarding_get_pdf")
    builder.button(text="‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="onboarding_skip_pdf")
    builder.adjust(1)
    
    await message.answer(welcome_text, reply_markup=builder.as_markup())

# –û—Ç–ø—Ä–∞–≤–∫–∞ PDF
@router.callback_query(F.data == "onboarding_get_pdf")
async def send_pdf_file(callback: CallbackQuery):
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–£–¢–¨ - –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        pdf_path = '/root/gym_trainer_bot/menu.pdf'
        
        if not os.path.exists(pdf_path):
            await callback.message.answer("‚ùå –§–∞–π–ª —Å –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!")
            logging.error(f"PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
            await callback.answer()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
        pdf_file = FSInputFile(pdf_path, filename="menu.pdf")
        await callback.message.answer_document(
            pdf_file,
            caption="üéÅ *–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!*\n\n"
                   "üìã –†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å\n\n"
                   "–°–æ—Ö—Ä–∞–Ω–∏ —Ñ–∞–π–ª –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ! "
                   "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        await update_onboarding_data(callback.from_user.id, received_pdf=1)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è follow-up –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        next_question_date = datetime.datetime.now() + datetime.timedelta(hours=24)
        await update_onboarding_data(callback.from_user.id, next_question_date=next_question_date.isoformat())
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
        await show_bot_options(callback.message)
        
    except Exception as e:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º.")
        print(f"PDF sending error: {e}")
    
    await callback.answer()

# –ü—Ä–æ–ø—É—Å–∫ PDF
@router.callback_query(F.data == "onboarding_skip_pdf")
async def skip_pdf(callback: CallbackQuery):
    await callback.message.answer(
        "–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω —É —Ç—Ä–µ–Ω–µ—Ä–∞.\n\n"
        "–î–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö! üëá"
    )
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    await show_bot_options(callback.message)
    await callback.answer()

# –ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è/–ø—Ä–æ–ø—É—Å–∫–∞ PDF
async def show_bot_options(message: Message):
    options_text = (
        "‚ú® *–ß—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:*\n\n"
        "1. üèãÔ∏è *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫* - 50 BYN\n"
        "   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–¥ —Ç–≤–æ–∏ —Ü–µ–ª–∏\n"
        "   ‚Ä¢ –£—á–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
        "   ‚Ä¢ –ì–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n"
        "2. üèãÔ∏è *–ü–æ–ª–Ω–æ–µ –æ–Ω–ª–∞–π–Ω-–≤–µ–¥–µ–Ω–∏–µ* - 200 BYN/–º–µ—Å—è—Ü\n"
        "   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "   ‚Ä¢ –ü–∏—Ç–∞–Ω–∏–µ + —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞\n"
        "   ‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n\n"
        "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üèãÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (50 BYN)", callback_data="option_nutrition")
    builder.button(text="üèãÔ∏è –ü–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ (200 BYN/–º–µ—Å—è—Ü)", callback_data="option_full")
    builder.button(text="ü§î –°–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="option_info")
    builder.adjust(1)
    
    await message.answer(options_text, reply_markup=builder.as_markup())

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
@router.callback_query(F.data == "option_info")
async def show_detailed_info(callback: CallbackQuery):
    info_text = (
        "üìã *–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:*\n\n"
        "üèãÔ∏è *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (50 BYN)*:\n"
        "‚Ä¢ –ê–Ω–∫–µ—Ç–∞ –∏–∑ 4 –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Ç–≤–æ–∏—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–ª–µ\n"
        "‚Ä¢ –£—á–µ—Ç —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"
        "üèãÔ∏è *–ü–æ–ª–Ω–æ–µ –æ–Ω–ª–∞–π–Ω-–≤–µ–¥–µ–Ω–∏–µ (200 BYN/–º–µ—Å—è—Ü)*:\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è –ø–æ–¥ —Ç–≤–æ–∏ —Ü–µ–ª–∏ –∏ –∂–µ–ª–∞–Ω–∏—è\n"
        "‚Ä¢ –£ –Ω–∞—Å —É–¥–æ–±–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–∏—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∑–∞–±—É–¥—å –æ –±–ª–æ–∫–Ω–æ—Ç–∞—Ö –∏ –Ω–µ –Ω–∞–ø—Ä—è–≥–∞–π –ø–∞–º—è—Ç—å\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ—Ç—á–µ—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        "‚Ä¢ –í–µ–¥–µ–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –≤ –±–æ—Ç–µ –µ—Å—Ç—å –±–∞–∑–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
        "‚Ä¢ –≠—Ç–æ—Ç –±–æ—Ç –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª—å—à–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ä–∞—Å—á–∏—Ç–∞–Ω–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é, –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤—å!\n"
        "‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º, –±–æ—Ç –≤—Å–µ–≥–æ –ª–∏—à—å –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –≤ –∫–∞–∫–∏—Ö —Ç–æ –≤–æ–ø—Ä–æ—Å–∞—Ö\n"
        "‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø–ª–∞—Ç (–£ –≤–∞—Å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –Ω–µ –±—É–¥–µ—Ç –ø—É—Ç–∞–Ω–∏—Ü—ã –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ)\n"
        "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ! üëá"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üèãÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - 50 BYN", callback_data="option_nutrition")
    builder.button(text="üèãÔ∏è –ü–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ - 200 BYN", callback_data="option_full")
    builder.adjust(1)
    
    await callback.message.edit_text(info_text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@router.callback_query(F.data == "ask_question")
async def handle_ask_question(callback: CallbackQuery):
    await show_trainer_contacts(callback.message)
    await callback.answer()

# –í—ã–±–æ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è
@router.callback_query(F.data == "option_nutrition")
async def start_nutrition_questionnaire(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! üèãÔ∏è\n"
        "–°–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—Å–µ–≥–æ –∑–∞ 50 BYN!\n\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞:"
    )
    
    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å - —Ü–µ–ª–∏ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
    builder = InlineKeyboardBuilder()
    builder.button(text="üçÉ –ü–æ—Ö—É–¥–µ—Ç—å", callback_data="goal_lose")
    builder.button(text="üí™ –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", callback_data="goal_gain") 
    builder.button(text="‚ù§Ô∏è –£–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="goal_health")
    builder.button(text="‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", callback_data="goal_maintain")
    builder.adjust(1)
    
    await callback.message.answer(
        "1/4 ‚Ä¢ –ö–∞–∫–∞—è —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
@router.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    goal_map = {
        "goal_lose": "–ø–æ—Ö—É–¥–µ—Ç—å",
        "goal_gain": "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", 
        "goal_health": "—É–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ",
        "goal_maintain": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"
    }
    
    goal = goal_map[callback.data]
    await state.update_data(goal=goal)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞", callback_data="allergies_yes")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data="allergies_no")
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"–¶–µ–ª—å: {goal} üëç\n\n"
        "2/4 ‚Ä¢ –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –∑–∞–ø—Ä–µ—Ç—ã –≤—Ä–∞—á–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–æ—Ä—Ç–æ–º?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–ª–µ—Ä–≥–∏–π
@router.callback_query(F.data.startswith("allergies_"))
async def process_allergies(callback: CallbackQuery, state: FSMContext):
    has_allergies = 1 if callback.data == "allergies_yes" else 0
    await state.update_data(allergies=has_allergies)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="0-1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data="freq_01")
    builder.button(text="2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data="freq_23")
    builder.button(text="4+ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data="freq_4plus")
    builder.adjust(1)
    
    allergy_text = "–µ—Å—Ç—å" if has_allergies else "–Ω–µ—Ç"
    await callback.message.edit_text(
        f"–ó–¥–æ—Ä–æ–≤—å–µ/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {allergy_text} üëç\n\n"
        "3/4 ‚Ä¢ –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@router.callback_query(F.data.startswith("freq_"))
async def process_training_frequency(callback: CallbackQuery, state: FSMContext):
    freq_map = {
        "freq_01": "0-1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
        "freq_23": "2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", 
        "freq_4plus": "4+ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"
    }
    
    frequency = freq_map[callback.data]
    await state.update_data(training_frequency=frequency)
    
    await callback.message.edit_text(
        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {frequency} üëç\n\n"
        "4/6 ‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 180"
    )
    await state.set_state(OnboardingState.waiting_for_height)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞
@router.message(OnboardingState.waiting_for_height, F.text)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if 100 <= height <= 250:
            await state.update_data(height=height)
            
            await message.answer(
                f"–†–æ—Å—Ç: {height} —Å–º üëç\n\n"
                "5/6 ‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 75"
            )
            await state.set_state(OnboardingState.waiting_for_weight)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞
@router.message(OnboardingState.waiting_for_weight, F.text)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        if 30 <= weight <= 200:
            await state.update_data(weight=weight)
            
            data = await state.get_data()
            if data.get('allergies') == 1:
                await message.answer(
                    f"–í–µ—Å: {weight} –∫–≥ üëç\n\n"
                    "6/6 ‚Ä¢ –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —É —Ç–µ–±—è –∑–∞–ø—Ä–µ—Ç—ã –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?\n"
                    "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:"
                )
                await state.set_state(OnboardingState.waiting_for_allergies_details)
            else:
                await complete_nutrition_questionnaire(message, state)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∞–ª–ª–µ—Ä–≥–∏–π
@router.message(OnboardingState.waiting_for_allergies_details, F.text)
async def process_allergies_details(message: Message, state: FSMContext):
    data = await state.get_data()
    await complete_nutrition_questionnaire(message, state, message.text)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
async def complete_nutrition_questionnaire(message: Message, state: FSMContext, allergies_details=None):
    data = await state.get_data()
    
    await update_onboarding_data(
        message.from_user.id,
        goal=data.get('goal'),
        allergies=data.get('allergies'),
        allergies_details=allergies_details,
        training_frequency=data.get('training_frequency'),
        height=data.get('height'),
        weight=data.get('weight')
    )
    
    payment_text = (
        "üéâ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!\n\n"
        "üí≥ *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*\n"
        "1. –û–ø–ª–∞—Ç–∏ 50 BYN –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "   ‚Ä¢ –ù–æ–º–µ—Ä: 5299 2299 3689 8638\n"
        "2. –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
        "3. –ü–æ–ª—É—á–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!\n\n"
        "–û–ø–ª–∞—Ç–∏–ª? –ü—Ä–∏—Å—ã–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç! üì∏"
    )
    
    await message.answer(payment_text)
    await state.set_state(OnboardingState.waiting_for_onboarding_screenshot)

# –í—ã–±–æ—Ä –ø–æ–ª–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è
@router.callback_query(F.data == "option_full")
async def start_full_onboarding(callback: CallbackQuery):
    full_info_text = (
        "üèãÔ∏è *–ü–æ–ª–Ω–æ–µ –æ–Ω–ª–∞–π–Ω-–≤–µ–¥–µ–Ω–∏–µ - 200 BYN/–º–µ—Å—è—Ü*\n\n"
        "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ–æ—Ç—á–µ—Ç–æ–≤, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫–∏\n"
        "‚úÖ –í–µ–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º\n"
        "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –º–µ—Ä–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
        "1. –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º –±–æ—Ç–∞\n"
        "2. –ê–Ω–∫–µ—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º\n"
        "3. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü\n"
        "4. –ü–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç—Ä–µ–Ω–µ—Ä–∞\n\n"
        "üí≥ *–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:*\n"
        "1. –ü–µ—Ä–µ–≤–µ–¥–∏ 200 BYN –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "   ‚Ä¢ –ù–æ–º–µ—Ä: 5299 2299 3689 8638\n"
        "2. –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
        "3. –ü–æ–ª—É—á–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ –∞–Ω–∫–µ—Ç—É!\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? üí™"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ", callback_data="pay_full")
    builder.button(text="üìû –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")
    builder.adjust(1)
    
    await callback.message.edit_text(full_info_text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è –∏–∑ onboarding
@router.callback_query(F.data == "pay_full")
async def handle_full_payment(callback: CallbackQuery, state: FSMContext):
    payment_instructions = (
        "üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è*\n\n"
        "–°—É–º–º–∞: 200 BYN/–º–µ—Å—è—Ü\n"
        "–ö–∞—Ä—Ç–∞: 5299 2299 3689 8638\n"
        "*–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏:* \"–ü–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ\"\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:\n"
        "1. –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ üì∏\n"  
        "2. –°—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n"
        "3. –ó–∞–ø–æ–ª–Ω–∏—à—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É\n"
        "4. –ü–æ–ª—É—á–∏—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!\n\n"
        "–û–ø–ª–∞—Ç–∏–ª? –ü—Ä–∏—Å—ã–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç!"
    )
    
    await callback.message.edit_text(payment_instructions)
    await callback.answer()

@router.message(F.photo)
async def handle_onboarding_payment_screenshot(message: Message, state: FSMContext):
    try:
        screenshot_id = message.photo[-1].file_id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        current_state = await state.get_state()
        user_data = await state.get_data()
        
        product_type = 'full'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑ –∞–Ω–∫–µ—Ç—ã –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª–∏ - —ç—Ç–æ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
        if (current_state == OnboardingState.waiting_for_onboarding_screenshot or 
            'goal' in user_data):
            product_type = 'nutrition'
            user_message = "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã."
            admin_caption = f"üí∞ *–û–ü–õ–ê–¢–ê –ü–õ–ê–ù–ê –¢–†–ï–ù–ò–†–û–í–û–ö* (50 BYN)\n\nüë§ {message.from_user.full_name}"
        else:
            # –≠—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è –∏–∑ onboarding
            product_type = 'full'
            user_message = "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É..."
            admin_caption = f"üí∞ *–û–ü–õ–ê–¢–ê –ü–û–õ–ù–û–ì–û –í–ï–î–ï–ù–ò–Ø* (200 BYN)\n\nüë§ {message.from_user.full_name}"
            
            # –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ö–ï–¢–£ –°–†–ê–ó–£ –¥–ª—è onboarding –ø–æ—Ç–æ–∫–∞
            await start_full_onboarding_questionnaire(message.from_user.id)
        
        await message.answer(user_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        from database import add_payment
        await add_payment(message.from_user.id, screenshot_id, product_type)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
        from keyboards.main_menu import get_admin_payment_decision_kb
        full_admin_text = (
            f"{admin_caption}\n"
            f"üÜî ID: {message.from_user.id}\n"
            f"üìÖ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç:"
        )
        
        await bot.send_photo(
            chat_id=config.ADMIN_ID,
            photo=screenshot_id,
            caption=full_admin_text,
            reply_markup=get_admin_payment_decision_kb(message.from_user.id, product_type)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
        )
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º.")
        print(f"Payment error: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ onboarding
@router.callback_query(F.data == "pay_full")
async def handle_full_payment(callback: CallbackQuery):
    payment_instructions = (
        "üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è*\n\n"
        "–°—É–º–º–∞: 200 BYN/–º–µ—Å—è—Ü\n"
        "–ö–∞—Ä—Ç–∞: 5299 2299 3689 8638\n"
        "*–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏:* \"–ü–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ\"\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ üì∏"
    )
    
    await callback.message.edit_text(payment_instructions)
    await callback.answer()

async def start_full_questionnaire(user_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è payment.py)"""
    try:
        from utils.bot_instance import bot
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π
        welcome_text = (
            "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ!*\n\n"
            "–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è!\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üí™"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="start_full_questionnaire")
        builder.adjust(1)
        
        await bot.send_message(
            chat_id=user_id,
            text=welcome_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∫–µ—Ç—ã: {e}")
        raise e

@router.callback_query(F.data == "start_full_questionnaire")
async def handle_start_full_questionnaire(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await state.clear()
    
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! üèãÔ∏è\n"
        "–ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è —Ç–≤–æ–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã!\n\n"
        "üìè *1/9* ‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 180"
    )
    await state.set_state(FullQuestionnaireState.waiting_for_full_height)
    await callback.answer()

async def start_full_onboarding_questionnaire(user_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ onboarding –ø–æ—Ç–æ–∫–µ"""
    try:
        from utils.bot_instance import bot
        
        # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        from database import update_user_access
        new_access_date = await update_user_access(user_id, 30)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π
        welcome_text = (
            "üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ!*\n\n"
            f"‚úÖ –¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {new_access_date}\n\n"
            "–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è!\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üí™"
        )
        
        await bot.send_message(
            chat_id=user_id,
            text=welcome_text
        )
        
        # –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ö–ï–¢–£ –ò–ó questionnaire.py
        from handlers.questionnaire import start_full_questionnaire
        await start_full_questionnaire(user_id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∫–µ—Ç—ã onboarding: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        from utils.bot_instance import bot
        await bot.send_message(
            chat_id=user_id,
            text="üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ù–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."
        )
        raise e