from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from database import check_user_access, add_nutrition_report, get_nutrition_reports, save_calorie_norms, get_calorie_norms, add_calorie_request, get_pending_calorie_requests, update_calorie_request_status
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ database
from database import add_favorite_recipe, remove_favorite_recipe, get_favorite_recipes, is_recipe_favorite
from utils.bot_instance import bot
import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder
from data.recipes_database import RECIPES_DATABASE

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–∏—Ç–∞–Ω–∏–∏
class NutritionReport(StatesGroup):
    waiting_for_breakfast = State()
    waiting_for_lunch = State()
    waiting_for_dinner = State()
    waiting_for_snacks = State()
    waiting_for_water = State()
    waiting_for_notes = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å onboarding)
class NutritionCalorieCalculation(StatesGroup):
    waiting_for_calorie_age = State()
    waiting_for_calorie_weight = State()
    waiting_for_calorie_height = State()
    waiting_for_calorie_gender = State()
    waiting_for_calorie_activity = State()
    waiting_for_calorie_goal = State()

# –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
class RecipeSearch(StatesGroup):
    waiting_for_search_term = State()

# –û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏
@router.callback_query(F.data == "nutrition_report")
async def start_nutrition_report(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üç≥ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –∑–∞–≤—Ç—Ä–∞–∫–µ:")
    await state.set_state(NutritionReport.waiting_for_breakfast)
    await callback.answer()

@router.message(NutritionReport.waiting_for_breakfast, F.text)
async def process_breakfast(message: Message, state: FSMContext):
    await state.update_data(breakfast=message.text)
    await message.answer("üç≤ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –æ–±–µ–¥:")
    await state.set_state(NutritionReport.waiting_for_lunch)

@router.message(NutritionReport.waiting_for_lunch, F.text)
async def process_lunch(message: Message, state: FSMContext):
    await state.update_data(lunch=message.text)
    await message.answer("üçΩÔ∏è –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —É–∂–∏–Ω:")
    await state.set_state(NutritionReport.waiting_for_dinner)

@router.message(NutritionReport.waiting_for_dinner, F.text)
async def process_dinner(message: Message, state: FSMContext):
    await state.update_data(dinner=message.text)
    await message.answer("üçé –ë—ã–ª–∏ –ø–µ—Ä–µ–∫—É—Å—ã? –û–ø–∏—à–∏—Ç–µ:")
    await state.set_state(NutritionReport.waiting_for_snacks)

@router.message(NutritionReport.waiting_for_snacks, F.text)
async def process_snacks(message: Message, state: FSMContext):
    await state.update_data(snacks=message.text)
    await message.answer("üíß –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª–∏ (–≤ –ª–∏—Ç—Ä–∞—Ö)?")
    await state.set_state(NutritionReport.waiting_for_water)

@router.message(NutritionReport.waiting_for_water, F.text)
async def process_water(message: Message, state: FSMContext):
    try:
        water = float(message.text)
        await state.update_data(water=water)
        await message.answer("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
        await state.set_state(NutritionReport.waiting_for_notes)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5 –∏–ª–∏ 2):")

@router.message(NutritionReport.waiting_for_notes, F.text)
async def process_notes(message: Message, state: FSMContext):
    data = await state.get_data()
    notes = message.text if message.text.lower() != '–Ω–µ—Ç' else ''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    await add_nutrition_report(
        message.from_user.id,
        data['breakfast'],
        data['lunch'],
        data['dinner'],
        data['snacks'],
        data['water'],
        notes
    )
    
    await message.answer("‚úÖ –û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ä–∞—Ü–∏–æ–Ω–∞!")
    await state.clear()

# –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π
@router.callback_query(F.data == "nutrition_calories_norm")
async def show_calorie_norms(callback: CallbackQuery):
    norms = await get_calorie_norms(callback.from_user.id)
    if norms:
        calories, protein, fat, carbs, updated = norms
        text = (
            f"üìä –í–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:\n\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {protein} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {fat} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.fromisoformat(updated).strftime('%d.%m.%Y')}"
        )
    else:
        text = "–£ –≤–∞—Å –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–æ—Ä–º—ã –ø–∏—Ç–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
    
    await callback.message.answer(text)
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_gender_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ú—É–∂—Å–∫–æ–π", callback_data="nutrition_gender_male")
    builder.button(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="nutrition_gender_female")
    return builder.as_markup()

def get_activity_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", callback_data="nutrition_activity_sedentary")
    builder.button(text="–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="nutrition_activity_light")
    builder.button(text="–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="nutrition_activity_moderate")
    builder.button(text="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="nutrition_activity_high")
    builder.button(text="–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="nutrition_activity_extreme")
    builder.adjust(1)
    return builder.as_markup()

def get_goal_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="nutrition_goal_lose")
    builder.button(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data="nutrition_goal_maintain")
    builder.button(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="nutrition_goal_gain")
    builder.adjust(1)
    return builder.as_markup()

# –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
@router.callback_query(F.data == "nutrition_calories_calc")
async def start_calorie_calculation(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(NutritionCalorieCalculation.waiting_for_calorie_age)
    await callback.answer()

@router.message(NutritionCalorieCalculation.waiting_for_calorie_age, F.text)
async def process_calorie_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if 10 <= age <= 100:
            await state.update_data(age=age)
            await message.answer("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
            await state.set_state(NutritionCalorieCalculation.waiting_for_calorie_weight)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.message(NutritionCalorieCalculation.waiting_for_calorie_weight, F.text)
async def process_calorie_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if 30 <= weight <= 200:
            await state.update_data(weight=weight)
            await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
            await state.set_state(NutritionCalorieCalculation.waiting_for_calorie_height)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.message(NutritionCalorieCalculation.waiting_for_calorie_height, F.text)
async def process_calorie_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        if 100 <= height <= 250:
            await state.update_data(height=height)
            await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=get_gender_keyboard())
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.callback_query(F.data.startswith("nutrition_gender_"))
async def process_calorie_gender(callback: CallbackQuery, state: FSMContext):
    gender = "male" if callback.data == "nutrition_gender_male" else "female"
    await state.update_data(gender=gender)
    await callback.message.edit_text("üèÉ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=get_activity_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("nutrition_activity_"))
async def process_calorie_activity(callback: CallbackQuery, state: FSMContext):
    activity_map = {
        "nutrition_activity_sedentary": "sedentary",
        "nutrition_activity_light": "light", 
        "nutrition_activity_moderate": "moderate",
        "nutrition_activity_high": "high",
        "nutrition_activity_extreme": "extreme"
    }
    await state.update_data(activity=activity_map[callback.data])
    await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=get_goal_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("nutrition_goal_"))
async def process_calorie_goal(callback: CallbackQuery, state: FSMContext):
    goal_map = {
        "nutrition_goal_lose": "lose",
        "nutrition_goal_maintain": "maintain",
        "nutrition_goal_gain": "gain"
    }
    data = await state.get_data()
    data['goal'] = goal_map[callback.data]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    await add_calorie_request(
        callback.from_user.id,
        data['age'],
        data['weight'],
        data['height'],
        data['gender'],
        data['activity'],
        data['goal']
    )
    
    await callback.message.edit_text(
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–µ–Ω–µ—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º! "
        "–û–±—ã—á–Ω–æ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–æ—Ä–º—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã."
    )
    await state.clear()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    admin_text = (
        f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –æ—Ç {callback.from_user.full_name}\n\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"‚Ä¢ –í–µ—Å: {data['weight']} –∫–≥\n"
        f"‚Ä¢ –†–æ—Å—Ç: {data['height']} —Å–º\n"
        f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']}\n"
        f"‚Ä¢ –¶–µ–ª—å: {data['goal']}\n\n"
        f"üë§ @{callback.from_user.username}"
    )
    await bot.send_message(chat_id=config.ADMIN_ID, text=admin_text)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π)
@router.message(Command("calorierequests"))
async def cmd_calorie_requests(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    requests = await get_pending_calorie_requests()
    if not requests:
        await message.answer("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π.")
        return
    
    text = "üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π:\n\n"
    for req in requests:
        request_id, user_id, full_name, username, age, weight, height, gender, activity, goal, created = req
        text += f"üë§ {full_name} (@{username})\n"
        text += f"üìä –í–æ–∑—Ä–∞—Å—Ç: {age}, –í–µ—Å: {weight}–∫–≥, –†–æ—Å—Ç: {height}—Å–º\n"
        text += f"üéØ –¶–µ–ª—å: {goal}, –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}\n"
        text += f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n"
        text += "‚îÄ" * 30 + "\n"
    
    await message.answer(text)

@router.message(Command("setcalories"))
async def cmd_set_calories(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    try:
        # –ö–æ–º–∞–Ω–¥–∞: /setcalories <user_id> <calories> <protein> <fat> <carbs>
        parts = message.text.split()
        if len(parts) != 6:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcalories <user_id> <calories> <protein> <fat> <carbs>")
            return
        
        user_id = int(parts[1])
        calories = int(parts[2])
        protein = int(parts[3])
        fat = int(parts[4])
        carbs = int(parts[5])
        
        await save_calorie_norms(user_id, calories, protein, fat, carbs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö pending –∑–∞–ø—Ä–æ—Å–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_calorie_request_status(user_id, 'approved')
        
        await message.answer(f"‚úÖ –ù–æ—Ä–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_text = (
            f"üéâ –í–∞—à–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã!\n\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {protein} –≥/–¥–µ–Ω—å\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {fat} –≥/–¥–µ–Ω—å\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥/–¥–µ–Ω—å\n\n"
            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ—Ä–º—ã –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´ü•ó –ü–∏—Ç–∞–Ω–∏–µ¬ª ‚Üí ¬´–¢–≤–æ—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π¬ª"
        )
        await bot.send_message(chat_id=user_id, text=user_text)
        
    except (ValueError, IndexError):
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcalories <user_id> <calories> <protein> <fat> <carbs>")

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
@router.callback_query(F.data == "nutrition_recom")
async def nutrition_recom(callback: CallbackQuery):
    text = (
        "üçé –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n\n"
        "‚Ä¢ –ï—à—å—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –ø–∏—â—É\n"
        "‚Ä¢ –ü–µ–π—Ç–µ 2-3 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ –£–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –±–µ–ª–æ–∫ —Å –∫–∞–∂–¥—ã–º –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏\n"
        "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ processed food\n"
        "‚Ä¢ –ï—à—å—Ç–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n\n"
        "–î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º."
    )
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "nutrition_checklist")
async def nutrition_checklist(callback: CallbackQuery):
    text = (
        "üõí –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n"
        "‚úÖ –ë–µ–ª–∫–∏:\n‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞\n‚Ä¢ –ì–æ–≤—è–¥–∏–Ω–∞\n‚Ä¢ –†—ã–±–∞\n‚Ä¢ –Ø–π—Ü–∞\n‚Ä¢ –¢–≤–æ—Ä–æ–≥\n‚Ä¢ –¢–æ—Ñ—É\n\n"
        "‚úÖ –£–≥–ª–µ–≤–æ–¥—ã:\n‚Ä¢ –ì—Ä–µ—á–∫–∞\n‚Ä¢ –†–∏—Å\n‚Ä¢ –û–≤—Å—è–Ω–∫–∞\n‚Ä¢ –ö–∏–Ω–æ–∞\n‚Ä¢ –ë–∞—Ç–∞—Ç\n‚Ä¢ –¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–±\n\n"
        "‚úÖ –ñ–∏—Ä—ã:\n‚Ä¢ –ê–≤–æ–∫–∞–¥–æ\n‚Ä¢ –û—Ä–µ—Ö–∏\n‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ\n‚Ä¢ –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞\n‚Ä¢ –°–µ–º–µ–Ω–∞\n\n"
        "‚úÖ –û–≤–æ—â–∏:\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏\n‚Ä¢ –®–ø–∏–Ω–∞—Ç\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å\n‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã\n‚Ä¢ –û–≥—É—Ä—Ü—ã\n‚Ä¢ –¶–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞"
    )
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "nutrition_recipes")
async def nutrition_recipes(callback: CallbackQuery):
    from keyboards.main_menu import get_recipes_main_keyboard
    text = (
        "üìö *–ö–ù–ò–ì–ê –†–ï–¶–ï–ü–¢–û–í*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤:"
    )
    await callback.message.edit_text(text, reply_markup=get_recipes_main_keyboard())
    await callback.answer()

# --- –ö–ù–ò–ì–ê –†–ï–¶–ï–ü–¢–û–í ---

@router.callback_query(F.data == "nutrition_recipes_main")
async def nutrition_recipes_main(callback: CallbackQuery):
    from keyboards.main_menu import get_recipes_main_keyboard
    text = (
        "üìö *–ö–ù–ò–ì–ê –†–ï–¶–ï–ü–¢–û–í*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤:\n\n"
        "üç≥ *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º* - –∑–∞–≤—Ç—Ä–∞–∫–∏, –æ–±–µ–¥—ã, —É–∂–∏–Ω—ã\n"
        "‚ö° *–ü–æ –≤—Ä–µ–º–µ–Ω–∏* - –±—ã—Å—Ç—Ä—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"  
        "üî• *–ü–æ –∫–∞–ª–æ—Ä–∏—è–º* - –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π\n"
        "üîç *–ü–æ–∏—Å–∫* - –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ* - –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
        "üé≤ *–°–ª—É—á–∞–π–Ω—ã–π* - —Ä–µ—Ü–µ–ø—Ç –¥–Ω—è!"
    )
    await callback.message.edit_text(text, reply_markup=get_recipes_main_keyboard())
    await callback.answer()

@router.callback_query(F.data == "recipes_by_category")
async def recipes_by_category(callback: CallbackQuery, state: FSMContext):
    from keyboards.main_menu import get_recipes_categories_keyboard
    text = (
        "ü•ó *–†–ï–¶–ï–ü–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    await callback.message.edit_text(text, reply_markup=get_recipes_categories_keyboard())
    await callback.answer()

@router.callback_query(F.data == "recipes_by_time")
async def recipes_by_time(callback: CallbackQuery, state: FSMContext):
    from keyboards.main_menu import get_recipes_time_keyboard
    text = (
        "‚ö° *–†–ï–¶–ï–ü–¢–´ –ü–û –í–†–ï–ú–ï–ù–ò*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:"
    )
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text(text, reply_markup=get_recipes_time_keyboard())
    await callback.answer()

@router.callback_query(F.data == "recipes_by_calories")
async def recipes_by_calories(callback: CallbackQuery, state: FSMContext):
    from keyboards.main_menu import get_recipes_calories_keyboard
    text = (
        "üî• *–†–ï–¶–ï–ü–¢–´ –ü–û –ö–ê–õ–û–†–ò–Ø–ú*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:"
    )
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text(text, reply_markup=get_recipes_calories_keyboard())
    await callback.answer()

@router.callback_query(F.data == "recipes_search")
async def recipes_search(callback: CallbackQuery, state: FSMContext):
    text = (
        "üîç *–ü–û–ò–°–ö –†–ï–¶–ï–ü–¢–ê*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: *–∫—É—Ä–∏—Ü–∞*, *–æ–≤—Å—è–Ω–∫–∞*, *—à–ø–∏–Ω–∞—Ç*"
    )
    await callback.message.answer(text)
    await state.set_state(RecipeSearch.waiting_for_search_term)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å –ë–î
@router.callback_query(F.data.startswith("recipe_favorite_"))
async def add_to_favorites(callback: CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_")
    recipe_id = int(parts[2])
    category = parts[3]
    
    success = await add_favorite_recipe(user_id, category, recipe_id)
    if success:
        await callback.answer("‚úÖ –†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await update_recipe_keyboard(callback, recipe_id, category, True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

@router.callback_query(F.data.startswith("recipe_unfavorite_"))
async def remove_from_favorites(callback: CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_")
    recipe_id = int(parts[2])
    category = parts[3]
    
    await remove_favorite_recipe(user_id, category, recipe_id)
    await callback.answer("‚ùå –†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update_recipe_keyboard(callback, recipe_id, category, False)

async def update_recipe_keyboard(callback, recipe_id, category, is_favorite):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    from keyboards.main_menu import get_recipe_navigation_keyboard
    
    if category in RECIPES_DATABASE:
        recipes = RECIPES_DATABASE[category]
        current_recipe = None
        current_num = 0
        
        for i, recipe in enumerate(recipes, 1):
            if recipe['id'] == recipe_id:
                current_recipe = recipe
                current_num = i
                break
        
        if current_recipe:
            await callback.message.edit_reply_markup(
                reply_markup=get_recipe_navigation_keyboard(
                    current_num, len(recipes), category, is_favorite
                )
            )

@router.callback_query(F.data == "recipes_favorites")
async def recipes_favorites(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    favorites = await get_favorite_recipes(user_id)
    
    if not favorites:
        text = (
            "‚≠ê *–ò–ó–ë–†–ê–ù–ù–´–ï –†–ï–¶–ï–ü–¢–´*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–º–∏—Ç–µ ‚≠ê –Ω–∞ –ª—é–±–æ–º —Ä–µ—Ü–µ–ø—Ç–µ."
        )
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback.message.answer(text)
    else:
        from keyboards.main_menu import InlineKeyboardBuilder, InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        text = "‚≠ê *–í–ê–®–ò –ò–ó–ë–†–ê–ù–ù–´–ï –†–ï–¶–ï–ü–¢–´:*\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        categorized_recipes = {}
        
        for category, recipe_id in favorites:
            if category not in categorized_recipes:
                categorized_recipes[category] = []
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑–µ
            if category in RECIPES_DATABASE:
                for recipe in RECIPES_DATABASE[category]:
                    if recipe['id'] == recipe_id:
                        categorized_recipes[category].append(recipe)
                        break
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, recipes in categorized_recipes.items():
            category_name = {
                "breakfast": "ü•ó –ó–∞–≤—Ç—Ä–∞–∫–∏",
                "lunch": "üç≤ –û–±–µ–¥—ã", 
                "dinner": "üçΩÔ∏è –£–∂–∏–Ω—ã",
                "snacks": "üçé –ü–µ—Ä–µ–∫—É—Å—ã",
                "drinks": "ü•§ –ù–∞–ø–∏—Ç–∫–∏",
                "desserts": "üç∞ –î–µ—Å–µ—Ä—Ç—ã",
                "protein": "üçó –ë–µ–ª–∫–æ–≤—ã–µ",
                "vegetarian": "ü•¶ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ"
            }.get(category, category)
            
            text += f"*{category_name}:*\n"
            for recipe in recipes:
                text += f"‚Ä¢ {recipe['name']} ({recipe['calories']} –∫–∫–∞–ª)\n"
                builder.button(
                    text=f"üëÅÔ∏è {recipe['name'][:15]}...", 
                    callback_data=f"fav_view_{category}_{recipe['id']}"
                )
            text += "\n"
        
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="recipes_main")
        builder.adjust(2)
        
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("fav_view_"))
async def view_favorite_recipe(callback: CallbackQuery):
    parts = callback.data.split("_")
    category = parts[2]
    recipe_id = int(parts[3])
    
    if category in RECIPES_DATABASE:
        recipes = RECIPES_DATABASE[category]
        for i, recipe in enumerate(recipes, 1):
            if recipe['id'] == recipe_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                is_favorite = await is_recipe_favorite(callback.from_user.id, category, recipe_id)
                await show_recipe(callback, recipe, category, i, len(recipes), is_favorite)
                break
    await callback.answer()

@router.callback_query(F.data == "recipes_random")
async def recipes_random(callback: CallbackQuery):
    import random
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ä–µ—Ü–µ–ø—Ç
    categories = list(RECIPES_DATABASE.keys())
    random_category = random.choice(categories)
    recipes = RECIPES_DATABASE[random_category]
    random_recipe = random.choice(recipes)
    
    await show_recipe(callback, random_recipe, random_category, 1, len(recipes))
    await callback.answer()

@router.callback_query(F.data.startswith("recipes_category_"))
async def show_category_recipes(callback: CallbackQuery, state: FSMContext):
    category_map = {
        "recipes_category_breakfast": "breakfast",
        "recipes_category_lunch": "lunch", 
        "recipes_category_dinner": "dinner",
        "recipes_category_snacks": "snacks",
        "recipes_category_drinks": "drinks",
        "recipes_category_desserts": "desserts",
        "recipes_category_protein": "protein",
        "recipes_category_vegetarian": "vegetarian"
    }
    
    category = category_map.get(callback.data)
    if category in RECIPES_DATABASE and RECIPES_DATABASE[category]:
        recipes = RECIPES_DATABASE[category]
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await show_recipe(callback, recipes[0], category, 1, len(recipes))
    else:
        await callback.message.answer("ü•∫ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º!")
    await callback.answer()

@router.callback_query(F.data.startswith("recipe_"))
async def navigate_recipes(callback: CallbackQuery):
    parts = callback.data.split("_")
    action = parts[1]  # prev, next
    recipe_id = int(parts[2])
    category = parts[3] if len(parts) > 3 else None
    
    if category and category in RECIPES_DATABASE:
        recipes = RECIPES_DATABASE[category]
        if action == "prev" and recipe_id > 0:
            await show_recipe(callback, recipes[recipe_id-1], category, recipe_id, len(recipes))
        elif action == "next" and recipe_id <= len(recipes):
            await show_recipe(callback, recipes[recipe_id-1], category, recipe_id, len(recipes))
    
    await callback.answer()

async def show_recipe(callback, recipe, category, current_num, total_recipes, is_favorite=None):
    from keyboards.main_menu import get_recipe_navigation_keyboard
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
    if is_favorite is None:
        is_favorite = await is_recipe_favorite(callback.from_user.id, category, recipe['id'])
    
    text = (
        f"{recipe['name']}\n\n"
        f"üìä *–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ—Ä—Ü–∏—é:*\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe['protein']} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe['carbs']} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {recipe['fat']} –≥\n"
        f"‚è± –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {recipe['time']} –º–∏–Ω\n\n"
        f"üõí *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n" + "\n".join(recipe['ingredients']) + "\n\n"
        f"üë®‚Äçüç≥ *–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:*\n" + "\n".join(recipe['instructions']) + "\n\n"
        f"üí° *–°–æ–≤–µ—Ç:* {recipe['tips']}\n\n"
        f"üìñ –†–µ—Ü–µ–ø—Ç {current_num} –∏–∑ {total_recipes}"
    )
    
    await callback.message.edit_text(
        text, 
        reply_markup=get_recipe_navigation_keyboard(
            current_num, total_recipes, category, is_favorite
        )
    )

@router.callback_query(F.data == "nutrition_back")
async def nutrition_back(callback: CallbackQuery, state: FSMContext):
    from keyboards.main_menu import get_nutrition_keyboard
    await state.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è
    await callback.message.edit_text(
        "ü•ó *–ü–∏—Ç–∞–Ω–∏–µ*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_nutrition_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "recipes_main")
async def recipes_main_back(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    from keyboards.main_menu import get_recipes_main_keyboard
    text = (
        "üìö *–ö–ù–ò–ì–ê –†–ï–¶–ï–ü–¢–û–í*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤:"
    )
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    await callback.message.edit_text(text, reply_markup=get_recipes_main_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("recipes_time_"))
async def recipes_by_time_filter(callback: CallbackQuery):
    time_map = {
        "recipes_time_15": "–¥–æ 15 –º–∏–Ω—É—Ç",
        "recipes_time_30": "15-30 –º–∏–Ω—É—Ç", 
        "recipes_time_60": "30-60 –º–∏–Ω—É—Ç",
        "recipes_time_60plus": "–±–æ–ª–µ–µ 60 –º–∏–Ω—É—Ç"
    }
    
    time_filter = time_map.get(callback.data)
    if time_filter:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é)
        import random
        categories = list(RECIPES_DATABASE.keys())
        random_category = random.choice(categories)
        recipes = RECIPES_DATABASE[random_category]
        
        # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        suitable_recipes = [r for r in recipes if (
            (callback.data == "recipes_time_15" and r['time'] <= 15) or
            (callback.data == "recipes_time_30" and 15 < r['time'] <= 30) or
            (callback.data == "recipes_time_60" and 30 < r['time'] <= 60) or
            (callback.data == "recipes_time_60plus" and r['time'] > 60)
        )]
        
        if suitable_recipes:
            recipe = random.choice(suitable_recipes)
            await show_recipe(callback, recipe, random_category, 1, len(suitable_recipes))
        else:
            await callback.message.answer(f"ü•∫ –†–µ—Ü–µ–ø—Ç–æ–≤ {time_filter} –ø–æ–∫–∞ –Ω–µ—Ç. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º!")
    await callback.answer()

@router.callback_query(F.data.startswith("recipes_calories_"))
async def recipes_by_calories_filter(callback: CallbackQuery):
    calories_map = {
        "recipes_calories_200": "–¥–æ 200 –∫–∫–∞–ª",
        "recipes_calories_400": "200-400 –∫–∫–∞–ª",
        "recipes_calories_600": "400-600 –∫–∫–∞–ª", 
        "recipes_calories_600plus": "–±–æ–ª–µ–µ 600 –∫–∫–∞–ª"
    }
    
    calories_filter = calories_map.get(callback.data)
    if calories_filter:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é)
        import random
        categories = list(RECIPES_DATABASE.keys())
        random_category = random.choice(categories)
        recipes = RECIPES_DATABASE[random_category]
        
        # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
        suitable_recipes = [r for r in recipes if (
            (callback.data == "recipes_calories_200" and r['calories'] <= 200) or
            (callback.data == "recipes_calories_400" and 200 < r['calories'] <= 400) or
            (callback.data == "recipes_calories_600" and 400 < r['calories'] <= 600) or
            (callback.data == "recipes_calories_600plus" and r['calories'] > 600)
        )]
        
        if suitable_recipes:
            recipe = random.choice(suitable_recipes)
            await show_recipe(callback, recipe, random_category, 1, len(suitable_recipes))
        else:
            await callback.message.answer(f"ü•∫ –†–µ—Ü–µ–ø—Ç–æ–≤ {calories_filter} –ø–æ–∫–∞ –Ω–µ—Ç. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º!")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ - –¢–û–õ–¨–ö–û –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
@router.message(RecipeSearch.waiting_for_search_term, F.text & ~F.text.startswith('/'))
async def process_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_term = message.text.lower().strip()
    
    if len(search_term) < 3:
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return
    
    found_recipes = []
    
    # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    for category, recipes in RECIPES_DATABASE.items():
        for recipe in recipes:
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if search_term in recipe['name'].lower():
                found_recipes.append((recipe, category))
                continue
            
            # –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
            ingredients_text = ' '.join(recipe['ingredients']).lower()
            if search_term in ingredients_text:
                found_recipes.append((recipe, category))
    
    if found_recipes:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
        recipe, category = found_recipes[0]
        await show_recipe_search(message, recipe, category, 1, len(found_recipes), found_recipes)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    else:
        await message.answer(
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{search_term}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –î—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n" 
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ë–æ–ª–µ–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å"
        )
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞

async def show_recipe_search(message, recipe, category, current_num, total_recipes, all_recipes):
    """–ü–æ–∫–∞–∑ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    from keyboards.main_menu import InlineKeyboardBuilder, InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    if current_num > 1:
        prev_recipe, prev_category = all_recipes[current_num-2]
        builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"search_prev_{current_num-1}")
    
    builder.button(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"recipe_favorite_{recipe['id']}_{category}")
    
    if current_num < total_recipes:
        next_recipe, next_category = all_recipes[current_num]
        builder.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"search_next_{current_num+1}")
    
    builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="recipes_search")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="recipes_main")
    builder.adjust(2)
    
    text = (
        f"üîç *–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç ({current_num} –∏–∑ {total_recipes}):*\n\n"
        f"{recipe['name']}\n\n"
        f"üìä *–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ—Ä—Ü–∏—é:*\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe['protein']} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe['carbs']} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {recipe['fat']} –≥\n"
        f"‚è± –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {recipe['time']} –º–∏–Ω\n\n"
        f"üõí *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n" + "\n".join(recipe['ingredients']) + "\n\n"
        f"üë®‚Äçüç≥ *–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:*\n" + "\n".join(recipe['instructions']) + "\n\n"
        f"üí° *–°–æ–≤–µ—Ç:* {recipe['tips']}"
    )
    
    await message.answer(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data.startswith("search_"))
async def navigate_search(callback: CallbackQuery):
    parts = callback.data.split("_")
    action = parts[1]  # prev, next
    position = int(parts[2])
    
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ –ë–î
    await callback.message.answer("üîç –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ")
    await callback.answer()