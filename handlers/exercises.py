from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from database import get_exercise_videos, get_exercise_literature, add_exercise_video, add_exercise_literature
from utils.bot_instance import bot
import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∞–¥–º–∏–Ω)
class AddExerciseVideo(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_video = State()

class AddLiterature(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_file = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è YouTube –≤–∏–¥–µ–æ
class AddYouTubeVideo(StatesGroup):
    waiting_for_name = State()
    waiting_for_url = State()
    waiting_for_description = State()
    waiting_for_category = State()

# –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
@router.callback_query(F.data == "exercises_videos")
async def show_exercise_videos(callback: CallbackQuery):
    videos = await get_exercise_videos()
    if not videos:
        await callback.message.answer("üé• –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for video in videos:
        name, file_id, description, category = video
        if category not in categories:
            categories[category] = []
        categories[category].append((name, file_id, description))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    text = "üé• *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:*\n\n"
    for category in categories.keys():
        text += f"‚Ä¢ {category}\n"
    
    await callback.message.answer(text, reply_markup=get_video_categories_keyboard(categories.keys()))
    await callback.answer()

def get_video_categories_keyboard(categories):
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(text=category, callback_data=f"video_cat_{category}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="exercises_back")
    builder.adjust(2)
    return builder.as_markup()

@router.callback_query(F.data.startswith("video_cat_"))
async def show_videos_by_category(callback: CallbackQuery):
    category = callback.data.replace("video_cat_", "")
    videos = await get_exercise_videos(category)
    
    if not videos:
        await callback.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤.")
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    for video in videos:
        name, file_id, description = video
        builder.button(text=name, callback_data=f"ex_video_{file_id}")
    
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="exercises_videos")
    builder.adjust(1)
    
    await callback.message.answer(f"üé• –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - *{category}*:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("ex_video_"))
async def send_exercise_video(callback: CallbackQuery):
    file_id = callback.data.replace("ex_video_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–µ–æ –ø–æ file_id
    videos = await get_exercise_videos()
    for video in videos:
        name, vid_file_id, description, category = video
        if vid_file_id == file_id:
            try:
                await callback.message.answer_video(video=file_id, caption=f"üèãÔ∏è *{name}*\n\n{description}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                await callback.answer()
                return
            except Exception as e:
                await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –û—à–∏–±–∫–∞: {e}")
                await callback.answer()
                return
    
    await callback.message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await callback.answer()

# –°–æ–≤–µ—Ç—ã –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
@router.callback_query(F.data == "exercises_literature")
async def show_exercise_literature(callback: CallbackQuery):
    literature = await get_exercise_literature()
    if not literature:
        await callback.message.answer("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for doc in literature:
        title, file_id, description, category = doc
        if category not in categories:
            categories[category] = []
        categories[category].append((title, file_id, description))
    
    text = "üìö *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:*\n\n"
    for category in categories.keys():
        text += f"‚Ä¢ {category}\n"
    
    await callback.message.answer(text, reply_markup=get_literature_categories_keyboard(categories.keys()))
    await callback.answer()

def get_literature_categories_keyboard(categories):
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(text=category, callback_data=f"doc_cat_{category}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="exercises_back")
    builder.adjust(2)
    return builder.as_markup()

@router.callback_query(F.data.startswith("doc_cat_"))
async def show_literature_by_category(callback: CallbackQuery):
    category = callback.data.replace("doc_cat_", "")
    docs = await get_exercise_literature(category)
    
    if not docs:
        await callback.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    builder = InlineKeyboardBuilder()
    for doc in docs:
        title, file_id, description = doc
        builder.button(text=title, callback_data=f"ex_doc_{file_id}")
    
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="exercises_literature")
    builder.adjust(1)
    
    await callback.message.answer(f"üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã - *{category}*:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("ex_doc_"))
async def send_exercise_document(callback: CallbackQuery):
    file_id = callback.data.replace("ex_doc_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ file_id
    docs = await get_exercise_literature()
    for doc in docs:
        title, doc_file_id, description, category = doc
        if doc_file_id == file_id:
            try:
                await callback.message.answer_document(document=file_id, caption=f"üìÑ *{title}*\n\n{description}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                await callback.answer()
                return
            except Exception as e:
                await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –û—à–∏–±–∫–∞: {e}")
                await callback.answer()
                return
    
    await callback.message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

# –†–∞–±–æ—Ç–∞ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
@router.callback_query(F.data == "exercises_equipment")
async def show_equipment_guide(callback: CallbackQuery):
    text = (
        "üß§ *–†–∞–±–æ—Ç–∞ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º:*\n\n"
        "‚úÖ *–ü–æ—è—Å–∞:*\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–∏\n‚Ä¢ –ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º —Ç—É–≥–æ\n‚Ä¢ –†–∞—Å–ø–æ–ª–∞–≥–∞–π—Ç–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—É–ø–∫–∞\n\n"
        "‚úÖ *–ü–µ—Ä—á–∞—Ç–∫–∏:*\n‚Ä¢ –ó–∞—â–∏—â–∞—é—Ç –æ—Ç –º–æ–∑–æ–ª–µ–π\n‚Ä¢ –£–ª—É—á—à–∞—é—Ç —Ö–≤–∞—Ç\n‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Å —Ö–æ—Ä–æ—à–µ–π –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–µ–π\n\n"
        "‚úÖ *–õ—è–º–∫–∏:*\n‚Ä¢ –î–ª—è —Ç—è–≥–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n‚Ä¢ –ü–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏ —Å–ª–∞–±–æ–º —Ö–≤–∞—Ç–µ\n‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ\n\n"
        "‚úÖ *–ö–∏—Å—Ç–µ–≤—ã–µ –±–∏–Ω—Ç—ã:*\n‚Ä¢ –î–ª—è –∂–∏–º–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∑–∞–ø—è—Å—Ç—å—è\n‚Ä¢ –ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º —Ç—É–≥–æ\n\n"
        "üí° *–î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É.*"
    )
    await callback.message.answer(text)
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
@router.callback_query(F.data == "exercises_back")
async def exercises_back(callback: CallbackQuery):
    await callback.message.edit_text("üìö –†–∞–∑–¥–µ–ª ¬´–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è¬ª:", reply_markup=get_exercises_keyboard())
    await callback.answer()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
@router.message(Command("addexercise"))
async def cmd_add_exercise(message: Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    await state.set_state(AddExerciseVideo.waiting_for_name)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è YouTube –≤–∏–¥–µ–æ
@router.message(Command("addyoutube"))
async def cmd_add_youtube(message: Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    await state.set_state(AddYouTubeVideo.waiting_for_name)

@router.message(AddYouTubeVideo.waiting_for_name, F.text)
async def process_yt_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ YouTube —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://youtu.be/xxxxxx):")
    await state.set_state(AddYouTubeVideo.waiting_for_url)

@router.message(AddYouTubeVideo.waiting_for_url, F.text)
async def process_yt_url(message: Message, state: FSMContext):
    if "youtube.com" not in message.text and "youtu.be" not in message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é YouTube —Å—Å—ã–ª–∫—É.")
        return
    
    await state.update_data(url=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    await state.set_state(AddYouTubeVideo.waiting_for_description)

@router.message(AddYouTubeVideo.waiting_for_description, F.text)
async def process_yt_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    categories = ["–ì—Ä—É–¥—å", "–°–ø–∏–Ω–∞", "–ù–æ–≥–∏", "–ü–ª–µ—á–∏", "–†—É–∫–∏", "–ü—Ä–µ—Å—Å", "–ö–∞—Ä–¥–∏–æ", "–†–∞—Å—Ç—è–∂–∫–∞"]
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(text=category, callback_data=f"yt_cat_{category}")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())
    await state.set_state(AddYouTubeVideo.waiting_for_category)

@router.callback_query(F.data.startswith("yt_cat_"))
async def process_yt_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.replace("yt_cat_", "")
    data = await state.get_data()
    
    await add_youtube_video(data['name'], data['url'], data['description'], category)
    await callback.message.answer(f"‚úÖ YouTube –≤–∏–¥–µ–æ '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'!")
    await state.clear()
    await callback.answer()

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–µ—à–∞–ª —Ä–∞–±–æ—Ç–µ
@router.message(F.text)
async def handle_text_message(message: Message):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏, –ª—É—á—à–µ –µ–≥–æ —É–±—Ä–∞—Ç—å
    # –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º
    pass