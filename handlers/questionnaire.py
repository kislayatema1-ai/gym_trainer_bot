import asyncio
import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import update_onboarding_data, get_full_onboarding_data  # –ò–ó–ú–ï–ù–ò–õ–ò –ù–ê get_full_onboarding_data
from utils.bot_instance import bot  # –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢ –ë–û–¢–ê
from config import config
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
class QuestionnaireState(StatesGroup):
    waiting_for_experience = State()
    waiting_for_equipment = State()
    waiting_for_schedule = State()
    waiting_for_food_preferences = State()
    waiting_for_health_issues = State()
    waiting_for_age_questionnaire = State()
    waiting_for_height_questionnaire = State()
    waiting_for_weight_questionnaire = State()
    waiting_for_activity_level = State()
    waiting_for_sleep = State()
    waiting_for_stress = State()
    waiting_for_gym_equipment = State()
    waiting_for_training_days = State()
    waiting_for_training_time = State()
    waiting_for_food_allergies = State()
    waiting_for_favorite_foods = State()
    waiting_for_disliked_foods = State()
    waiting_for_water_intake = State()
    waiting_for_supplements = State()
    waiting_for_injuries = State()
    waiting_for_goals = State()
    waiting_for_motivation = State()
    waiting_for_steps = State()

# –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
async def start_full_questionnaire(user_id: int):
    try:
        await bot.send_message(
            user_id,
            "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!*\n\n"
            "–¢–µ–ø–µ—Ä—å —è —Å–æ—Å—Ç–∞–≤–ª—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è.\n\n"
            "–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ - —ç—Ç–æ –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç. "
            "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ—Ç–≤–µ—Ç–∏—à—å, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞! üí™"
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        from aiogram.fsm.context import FSMContext
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π state –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å state –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        builder = InlineKeyboardBuilder()
        builder.button(text="ü§∑‚Äç‚ôÄÔ∏è –ù–µ—Ç –æ–ø—ã—Ç–∞ –≤ –∑–∞–ª–µ", callback_data="exp_zero")
        builder.button(text="üö∂ –ù–∞—á–∏–Ω–∞—é—â–∏–π (0-6 –º–µ—Å—è—Ü–µ–≤)", callback_data="exp_beginner")
        builder.button(text="üèÉ –û–ø—ã—Ç–Ω—ã–π (6+ –º–µ—Å—è—Ü–µ–≤)", callback_data="exp_intermediate") 
        builder.button(text="üèÜ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (2+ –≥–æ–¥–∞)", callback_data="exp_advanced")
        builder.adjust(1)
        
        await bot.send_message(
            user_id,
            "1/10 ‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"Error starting questionnaire: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@router.callback_query(F.data.startswith("exp_"))
async def process_experience(callback: CallbackQuery, state: FSMContext):
    exp_map = {
        "exp_zero": "–ù–µ—Ç –æ–ø—ã—Ç–∞ –≤ –∑–∞–ª–µ",
        "exp_beginner": "–ù–∞—á–∏–Ω–∞—é—â–∏–π (1-6 –º–µ—Å—è—Ü–µ–≤)",
        "exp_intermediate": "–û–ø—ã—Ç–Ω—ã–π (6+ –º–µ—Å—è—Ü–µ–≤)", 
        "exp_advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (2+ –≥–æ–¥–∞)"
    }
    
    experience = exp_map[callback.data]
    await update_onboarding_data(callback.from_user.id, experience=experience)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üèãÔ∏è –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª (–ø–æ–ª–Ω–æ–µ –æ—Å–Ω–∞—â–µ–Ω–∏–µ)", callback_data="equip_full")
    builder.button(text="üí™ –î–æ–º–∞—à–Ω–∏–π —Å–ø–æ—Ä—Ç–∑–∞–ª (–≥–∞–Ω—Ç–µ–ª–∏, —Å–∫–∞–º—å—è)", callback_data="equip_home")
    builder.button(text="üè† –ú–∏–Ω–∏–º—É–º (—Ä–µ–∑–∏–Ω–∫–∏, –∫–æ–≤—Ä–∏–∫)", callback_data="equip_minimal")
    builder.button(text="üö¥ –ö–∞—Ä–¥–∏–æ-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–±–µ–≥–æ–≤–∞—è, –≤–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä)", callback_data="equip_cardio")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"1. –û–ø—ã—Ç: {experience} ‚úÖ\n\n"
        "2/10 ‚Ä¢ –ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("equip_"))
async def process_equipment(callback: CallbackQuery, state: FSMContext):
    equip_map = {
        "equip_full": "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª (–ø–æ–ª–Ω–æ–µ –æ—Å–Ω–∞—â–µ–Ω–∏–µ)",
        "equip_home": "–î–æ–º–∞—à–Ω–∏–π —Å–ø–æ—Ä—Ç–∑–∞–ª (–≥–∞–Ω—Ç–µ–ª–∏, —Å–∫–∞–º—å—è)",
        "equip_minimal": "–ú–∏–Ω–∏–º—É–º (—Ä–µ–∑–∏–Ω–∫–∏, –∫–æ–≤—Ä–∏–∫)",
        "equip_cardio": "–ö–∞—Ä–¥–∏–æ-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–±–µ–≥–æ–≤–∞—è, –≤–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä)"
    }
    
    equipment = equip_map[callback.data]
    await update_onboarding_data(callback.from_user.id, equipment=equipment)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üåÖ –£—Ç—Ä–æ (6-10 —É—Ç—Ä–∞)", callback_data="time_morning")
    builder.button(text="üåá –î–µ–Ω—å (10-16 –¥–Ω—è)", callback_data="time_day")
    builder.button(text="üåÜ –í–µ—á–µ—Ä (16-22 –≤–µ—á–µ—Ä–∞)", callback_data="time_evening")
    builder.button(text="üïê –°–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", callback_data="time_flexible")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"2. –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment} ‚úÖ\n\n"
        "3/10 ‚Ä¢ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —É–¥–æ–±–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@router.callback_query(F.data.startswith("time_"))
async def process_schedule(callback: CallbackQuery, state: FSMContext):
    time_map = {
        "time_morning": "–£—Ç—Ä–æ (6-10 —É—Ç—Ä–∞)",
        "time_day": "–î–µ–Ω—å (10-16 –¥–Ω—è)",
        "time_evening": "–í–µ—á–µ—Ä (16-22 –≤–µ—á–µ—Ä–∞)",
        "time_flexible": "–°–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"
    }
    
    schedule = time_map[callback.data]
    await update_onboarding_data(callback.from_user.id, schedule=schedule)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üå± –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ (–±–µ–∑ –º—è—Å–∞)", callback_data="food_veg")
    builder.button(text="ü•ë –í–µ–≥–∞–Ω—Å—Ç–≤–æ (–±–µ–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)", callback_data="food_vegan")
    builder.button(text="üçΩÔ∏è –í—Å–µ –µ–º", callback_data="food_all")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"3. –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {schedule} ‚úÖ\n\n"
        "4/10 ‚Ä¢ –ö–∞–∫–∏–µ –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—â–µ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
@router.callback_query(F.data.startswith("food_"))
async def process_food_preferences(callback: CallbackQuery, state: FSMContext):
    food_map = {
        "food_veg": "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ (–±–µ–∑ –º—è—Å–∞)",
        "food_vegan": "–í–µ–≥–∞–Ω—Å—Ç–≤–æ (–±–µ–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)",
        "food_all": "–í—Å–µ –µ–º"
    }
    
    food_preferences = food_map[callback.data]
    await update_onboarding_data(callback.from_user.id, food_preferences=food_preferences)
    
    await callback.message.edit_text(
        f"4. –ü–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {food_preferences} ‚úÖ\n\n"
        "5/10 ‚Ä¢ –ï—Å—Ç—å –ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏, –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏? –ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –≤—Ä–∞—á–∞, –±—ã–ª–∏ –ª–∏ —Ç—Ä–∞–≤–º—ã?\n"
        "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):"
    )
    await state.set_state(QuestionnaireState.waiting_for_food_allergies)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–ª–µ—Ä–≥–∏–π
@router.message(QuestionnaireState.waiting_for_food_allergies, F.text)
async def process_food_allergies(message: Message, state: FSMContext):
    allergies = message.text if message.text.lower() != '–Ω–µ—Ç' else '–ù–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π'
    await update_onboarding_data(message.from_user.id, food_allergies=allergies)
    
    await message.answer(
        f"5. –ê–ª–ª–µ—Ä–≥–∏–∏ –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è: —É—á—Ç–µ–Ω—ã ‚úÖ\n\n"
        "6/10 ‚Ä¢ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
    )
    await state.set_state(QuestionnaireState.waiting_for_age_questionnaire)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(QuestionnaireState.waiting_for_age_questionnaire, F.text)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if 10 <= age <= 100:
            await update_onboarding_data(message.from_user.id, age=age)
            
            await message.answer(
                f"6. –í–æ–∑—Ä–∞—Å—Ç: {age} ‚úÖ\n\n"
                "7/10 ‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 180"
            )
            await state.set_state(QuestionnaireState.waiting_for_height_questionnaire)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞
@router.message(QuestionnaireState.waiting_for_height_questionnaire, F.text)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if 100 <= height <= 250:
            await update_onboarding_data(message.from_user.id, height=height)
            
            await message.answer(
                f"7. –†–æ—Å—Ç: {height} —Å–º ‚úÖ\n\n"
                "8/10 ‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 75"
            )
            await state.set_state(QuestionnaireState.waiting_for_weight_questionnaire)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞
@router.message(QuestionnaireState.waiting_for_weight_questionnaire, F.text)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        if 30 <= weight <= 200:
            await update_onboarding_data(message.from_user.id, weight=weight)
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üí∫ –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", callback_data="activity_low")
            builder.button(text="üö∂‚Äç‚ôÇÔ∏è –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)", callback_data="activity_medium")
            builder.button(text="üèÉ‚Äç‚ôÇÔ∏è –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)", callback_data="activity_high")
            builder.button(text="üî• –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)", callback_data="activity_extreme")
            builder.adjust(1)
            
            await message.answer(
                f"8. –í–µ—Å: {weight} –∫–≥ ‚úÖ\n\n"
                "9/10 ‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?",
                reply_markup=builder.as_markup()
            )
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@router.callback_query(F.data.startswith("activity_"))
async def process_activity_level(callback: CallbackQuery, state: FSMContext):
    activity_map = {
        "activity_low": "–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        "activity_medium": "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)",
        "activity_high": "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)", 
        "activity_extreme": "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)"
    }
    
    activity_level = activity_map[callback.data]
    await update_onboarding_data(callback.from_user.id, activity_level=activity_level)
    
    await callback.message.edit_text(
        f"9. –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_level} ‚úÖ\n\n"
        "10/10 ‚Ä¢ –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ—Ö–æ–¥–∏—à—å?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 8000"
    )
    await state.set_state(QuestionnaireState.waiting_for_steps)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
@router.message(QuestionnaireState.waiting_for_steps, F.text)
async def process_steps(message: Message, state: FSMContext):
    try:
        steps = int(message.text)
        if 1000 <= steps <= 50000:
            await update_onboarding_data(message.from_user.id, daily_steps=steps)
            
            # –ó–ê–í–ï–†–®–ê–ï–ú –ê–ù–ö–ï–¢–£
            await complete_questionnaire(message.from_user.id)
            await state.clear()
            
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (1000-50000):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8000):")

# ... –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º ...

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
async def complete_questionnaire(user_id: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        data = await get_full_onboarding_data(user_id)
        
        if not data:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_report = create_admin_report(data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        await bot.send_message(
            config.ADMIN_ID,
            admin_report,
            parse_mode="Markdown"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            "üéâ *–ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            "–¢—Ä–µ–Ω–µ—Ä —É–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!\n\n"
            "üìã *–í–∞–∂–Ω—ã–µ —à–∞–≥–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n"
            "1. –° —É—Ç—Ä–∞ —Å–¥–µ–ª–∞–π –∑–∞–º–µ—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìä –ü—Ä–æ–≥—Ä–µ—Å—Å¬ª\n"
            "2. –ó–∞–ø–∏—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–≤–µ—Å, –æ–±—ä–µ–º—ã)\n"
            "3. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤! üí™"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        try:
            from keyboards.main_menu import get_main_keyboard as get_keyboard
        except ImportError:
            try:
                from keyboards.main_menu import get_main_menu as get_keyboard
            except ImportError:
                try:
                    from keyboards.main_menu import main_menu_kb as get_keyboard
                except ImportError:
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    from aiogram.utils.keyboard import InlineKeyboardBuilder
                    def get_keyboard():
                        builder = InlineKeyboardBuilder()
                        builder.button(text="üçé –ü–∏—Ç–∞–Ω–∏–µ", callback_data="nutrition")
                        builder.button(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")
                        builder.button(text="üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="exercises")
                        builder.button(text="‚ùì FAQ", callback_data="faq")
                        builder.button(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
                        builder.adjust(2)
                        return builder.as_markup()
        
        await bot.send_message(
            user_id,
            "üì± *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞:*\n\n"
            "üçé *–ü–∏—Ç–∞–Ω–∏–µ* - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é, –ö–ë–ñ–£\n"
            "üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å* - –∑–∞–ø–∏—Å—å –∑–∞–º–µ—Ä–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
            "üí™ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è* - —Ç–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
            "‚ùì *FAQ* - –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞* - —Å–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º\n\n"
            "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –∏ –Ω–∞—á–∏–Ω–∞–π —Ä–∞–±–æ—Ç—É! üëá",
            reply_markup=get_keyboard()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É
        try:
            await bot.send_message(
                config.ADMIN_ID,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{str(e)}"
            )
        except Exception as admin_error:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É: {admin_error}")

def create_admin_report(data):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    report = f"üìã *–ù–û–í–ê–Ø –ê–ù–ö–ï–¢–ê –î–õ–Ø –ü–†–û–ì–†–ê–ú–ú–´*\n\n"
    
    if data:
        report += f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:* {data.get('user_id', 'N/A')}\n"
        report += f"üìÖ *–î–∞—Ç–∞:* {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        report += f"*–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n"
        report += f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        report += f"‚Ä¢ –†–æ—Å—Ç: {data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º\n"
        report += f"‚Ä¢ –í–µ—Å: {data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
        report += f"‚Ä¢ –®–∞–≥–∏ –≤ –¥–µ–Ω—å: {data.get('daily_steps', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        report += f"*–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n"
        report += f"‚Ä¢ –û–ø—ã—Ç: {data.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        report += f"‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {data.get('equipment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        report += f"‚Ä¢ –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data.get('schedule', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        report += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {data.get('activity_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        
        report += f"*–ü–∏—Ç–∞–Ω–∏–µ:*\n"
        report += f"‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {data.get('food_preferences', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
        report += f"‚Ä¢ –ê–ª–ª–µ—Ä–≥–∏–∏: {data.get('food_allergies', '–ù–µ—Ç')}\n\n"
        
        if data.get('health_issues') and data.get('health_issues') != '–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º':
            report += f"*–ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º:*\n{data.get('health_issues')}\n\n"
        
        if data.get('motivation'):
            report += f"*–ú–æ—Ç–∏–≤–∞—Ü–∏—è:*\n{data.get('motivation')}\n\n"
        
        report += f"#–∞–Ω–∫–µ—Ç–∞ #–Ω–æ–≤—ã–π–∫–ª–∏–µ–Ω—Ç"
    
    return report

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º router
__all__ = ['router', 'start_full_questionnaire']